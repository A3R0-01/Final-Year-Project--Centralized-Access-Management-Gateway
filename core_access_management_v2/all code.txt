
"""
Django settings for core_access_management_v2 project.
https://chatgpt.com/c/6794fb63-2878-8003-a001-f078323e9b08
Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from celery.schedules import crontab
import json
from datetime import time

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7z4m=ov8b*dz7m9zb^oj5wbn58=8@4qxsc0xy9o%u_s1*x)c6@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["host.docker.internal", '127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework_simplejwt',
    'corsheaders',
    'rest_framework',
    'django_prometheus',
    'django_celery_results',
    # 'django_crontab',
    'core',
    'core.citizen',
    'core.auth',
    'core.siteManager',
    'core.administrator',
    'core.grantee',
    'core.department',
    'core.association',
    'core.publicService',
    'core.request',
    'core.grant',
    'core.servicePermissions',
    'core.systemLog',
    'core.systemCron',
    'core.serviceSession'
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework_simplejwt.authentication.JWTAuthentication',),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'core_access_management_v2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core_access_management_v2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django_prometheus.db.backends.postgresql',
        'NAME': 'core_access_management_v2',
        'PASSWORD': 'bsrvnt',
        'USER': 'postgres',
        'HOST': 'localhost',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTH_USER_MODEL = 'citizen.Citizen'


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# System Crons
# CRONJOBS = [
#     ('*/2 * * * *', 'django.core.management.call_command', ['systemlogcron']),
# ]
CELERY_RESULT_BACKEND = 'django-db'
CELERY_TASK_DEFAULT_QUEUE = 'celery'
CELERY_BEAT_SCHEDULE = {
    'system_log_cron': {
        'task': 'myapp.tasks.system_log_cron',
        'schedule': crontab(minute='*/2'),
    },
}
# Topic for the Kafka system logs

SYSTEM_LOG_KAFKA_SETTINGS = {
    "topic" : "systemLog",
    "group_id": "systemLog",
    "auto_offset_reset": 'earliest',
    'value_deserializer': lambda v : json.loads(v.decode('utf-8')),
    "enable_auto_commit": True
}
CORS_ALLOW_ALL_ORIGINS = True
DEFAULT_SESSION_TIME = 2 
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3001",  # React/Next.js frontend
#     "http://127.0.0.1:3001",
# ]

"""
URL configuration for core_access_management_v2 project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from core.routers import urlPatterns
from django_prometheus import urls

from django_prometheus import exports

promPatterns = [path("promMetrics", exports.ExportToDjangoView, name="prometheus-django-metrics")]

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include(urlPatterns)),
    path('', include(promPatterns)),
]

from rest_framework import routers
from core.citizen.viewsets import CitizenViewSet, SiteManagerCitizenModelViewSet, AdministratorCitizenModelViewSet, GranteeCitizenModelViewSet
from core.siteManager.viewsets import SiteManagerModelViewSet
from core.administrator.viewsets import SiteManagerAdministratorModelViewSet, AdministratorModelViewSet
from core.grantee.viewset import AdministratorGranteeViewSet, GranteeModelsViewSet, SiteManagerGranteeViewSet
from core.auth.viewsets import RegisterViewSet, LoginCitizenViewSet, RefreshViewSet, LoginSiteManagerViewSet, LoginAdministratorViewSet, LoginGranteeViewSet
from core.department.viewsets import CitizenDepartmentViewSet, GranteeDepartmentViewSet, AdministratorDepartmentViewSet, SiteManagerDepartmentViewSet
from core.association.viewsets import CitizenAssociationModelViewSet, GranteeAssociationModelViewSet, AdministratorAssociationModelViewSet, SiteManagerAssociationModelViewSet
from core.publicService.viewset import CitizenPublicServiceViewSet, GranteePublicServiceViewSet, AdministratorPublicServiceViewSet, SiteManagerPublicServiceViewSet
from core.request.viewsets import CitizenRequestViewSet, GranteeRequestViewSet, AdministratorRequestViewSet, SiteManagerRequestViewSet
from core.grant.viewsets import CitizenGrantViewSet, GranteeGrantViewSet, AdministratorGrantViewSet, SiteManagerGrantViewSet
from core.systemLog.viewsets import GranteeCitizenLogViewSet, AdministratorCitizenLogViewSet, AdministratorGranteeLogViewSet, SiteManagerCitizenLogViewSet, SiteManagerGranteeLogViewSet, SiteManagerAdministratorLogViewSet, SiteManagerManagerLogViewSet
from core.serviceSession.viewset import SiteManagerServiceSessionViewSet, AdministratorServiceSessionViewSet, GranteeServiceSessionViewSet
from core.servicePermissions.viewsets import (
    SiteManagerAssociationPermissionViewSet, SiteManagerPublicServicePermissionViewSet, SiteManagerDepartmentPermissionViewSet,
    AdministratorAssociationPermissionViewSet, AdministratorPublicServicePermissionViewSet, AdministratorDepartmentPermissionViewSet,
    GranteePublicServicePermissionViewSet
)

router  = routers.SimpleRouter()



#Citizen
router.register(r'citizen', CitizenViewSet, basename='citizen')
router.register(r'auth/register', RegisterViewSet, basename='auth-register')
router.register(r'auth/login', LoginCitizenViewSet, basename='auth-login-citizen')
router.register(r'auth/refresh', RefreshViewSet, basename='auth-refresh-citizen')
router.register(r'department', CitizenDepartmentViewSet, basename='department')
router.register(r'association', CitizenAssociationModelViewSet, basename='association')
router.register(r'service', CitizenPublicServiceViewSet, basename='service')
router.register(r'request', CitizenRequestViewSet, basename='request')
router.register(r'grant', CitizenGrantViewSet, basename='grant')



# SiteManager
router.register(r'manager/manager', SiteManagerModelViewSet, basename='Manager')
router.register(r'manager/login', LoginSiteManagerViewSet, basename='auth-login-manager')
router.register(r'manager/citizen', SiteManagerCitizenModelViewSet, basename='manager-citizen')
router.register(r'manager/administrator', SiteManagerAdministratorModelViewSet, basename='manager-administrator')
router.register(r'manager/grantee', SiteManagerGranteeViewSet, basename='manager-grantee')
router.register(r'manager/department', SiteManagerDepartmentViewSet, basename='manager-department')
router.register(r'manager/association', SiteManagerAssociationModelViewSet, basename='manager-association')
router.register(r'manager/service', SiteManagerPublicServiceViewSet, basename='manager-service')
router.register(r'manager/request', SiteManagerRequestViewSet, basename='manager-request')
router.register(r'manager/grant', SiteManagerGrantViewSet, basename='manager-grant')
router.register(r'manager/log/citizen', SiteManagerCitizenLogViewSet, basename='manager-log-citizen')
router.register(r'manager/log/grantee', SiteManagerGranteeLogViewSet, basename='manager-log-grantee')
router.register(r'manager/log/administrator', SiteManagerAdministratorLogViewSet, basename='manager-log-administrator')
router.register(r'manager/log/manager', SiteManagerManagerLogViewSet, basename='manager-log-manager')
router.register(r'manager/permission/department', SiteManagerDepartmentPermissionViewSet, basename='manager-permission-department')
router.register(r'manager/permission/association', SiteManagerAssociationPermissionViewSet, basename='manager-permission-association')
router.register(r'manager/permission/service', SiteManagerPublicServicePermissionViewSet, basename='manager-permission-service')
router.register(r'manager/session', SiteManagerServiceSessionViewSet, basename='manager-session')


# Administrator
router.register(r'admin/login', LoginAdministratorViewSet, basename='auth-login-admin')
router.register(r'admin/citizen', AdministratorCitizenModelViewSet, basename='admin-citizen')
router.register(r'admin/admin', AdministratorModelViewSet, basename='admin-administrator')
router.register(r'admin/grantee', AdministratorGranteeViewSet, basename='admin-grantee')
router.register(r'admin/department', AdministratorDepartmentViewSet, basename='admin-department')
router.register(r'admin/association', AdministratorAssociationModelViewSet, basename='admin-association')
router.register(r'admin/service', AdministratorPublicServiceViewSet, basename='admin-service')
router.register(r'admin/request', AdministratorRequestViewSet, basename='admin-request')
router.register(r'admin/grant', AdministratorGrantViewSet, basename='admin-grant')
router.register(r'admin/log/citizen', AdministratorCitizenLogViewSet, basename='admin-log-citizen')
router.register(r'admin/log/grantee', AdministratorGranteeLogViewSet, basename='admin-log-grantee')
router.register(r'admin/permission/department', AdministratorDepartmentPermissionViewSet, basename='admin-permission-department')
router.register(r'admin/permission/association', AdministratorAssociationPermissionViewSet, basename='admin-permission-association')
router.register(r'admin/permission/service', AdministratorPublicServicePermissionViewSet, basename='admin-permission-service')
router.register(r'admin/session', AdministratorServiceSessionViewSet, basename='admin-session')



# Grantee
router.register(r'grantee/login', LoginGranteeViewSet, basename='auth-login-grantee')
router.register(r'grantee/grantee', GranteeModelsViewSet, basename='grantee-grantee')
router.register(r'grantee/citizen', GranteeCitizenModelViewSet, basename='grantee-citizen')
router.register(r'grantee/department', GranteeDepartmentViewSet, basename='grantee-department')
router.register(r'grantee/association', GranteeAssociationModelViewSet, basename='grantee-association')
router.register(r'grantee/service', GranteePublicServiceViewSet, basename='grantee-service')
router.register(r'grantee/permission/service', GranteePublicServicePermissionViewSet, basename='grantee-permission-service')
router.register(r'grantee/request', GranteeRequestViewSet, basename='grantee-request')
router.register(r'grantee/grant', GranteeGrantViewSet, basename='grantee-grant')
router.register(r'grantee/session', GranteeServiceSessionViewSet, basename='grantee-session')
# router.register(r'grantee/log', GranteeCitizenLogViewSet, basename='grantee-log')



urlPatterns = [
    *router.urls,
]

from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework_simplejwt.settings import api_settings
from rest_framework.exceptions import NotFound, PermissionDenied, AuthenticationFailed
from django.core.exceptions import ObjectDoesNotExist
from core.siteManager.models import SiteManager

class IsSiteManager(JWTAuthentication):
    def authenticate(self, request):
        # ManagerPassword, ManagerUserName = request.data['ManagerPassword'], request.data['ManagerUserName']
        data = super().authenticate(request)
        if data == None:
            raise AuthenticationFailed('Invalid Credentials. Please Login')
        authenticatedUser, token = data
        if hasattr(authenticatedUser, 'sitemanager'):
            # siteManager: SiteManager = authenticatedUser.siteManager
            # if siteManager.ManagerUserName == ManagerUserName and siteManager.check_password(ManagerPassword):
            return authenticatedUser, token
        AuthenticationFailed('Invalid Credentials. Please Login')

class IsAdministrator(JWTAuthentication):
    def authenticate(self, request):
        data = super().authenticate(request)
        if data == None:
            raise AuthenticationFailed('Invalid Credentials. Please Login')
        authenticatedUser, token = data
        if hasattr(authenticatedUser, 'administrator'):
            return authenticatedUser, token
        raise AuthenticationFailed('Invalid Credentials. Please Login')

class IsGrantee(JWTAuthentication):

    def authenticate(self, request):
        data = super().authenticate(request)
        if data == None:
            raise AuthenticationFailed('Invalid Credentials. Please Login')
        authenticatedUser, token = data
        if hasattr(authenticatedUser, 'grantee'):
            return authenticatedUser, token
        raise AuthenticationFailed('Invalid Credentials. Please Login')
from django.db import models
from django.core.exceptions import ObjectDoesNotExist
from rest_framework.exceptions import NotFound
import uuid

# Create your models here.
class AbstractManager(models.Manager):

    def get_by_id(self, id: str) -> models.Model:
        try:
            instance = self.get(PublicId=id)
            return instance
        except (ObjectDoesNotExist, ValueError, TypeError):
            raise NotFound()

class AbstractModel(models.Model):
    PublicId = models.UUIDField(unique=True, db_index=True, default=uuid.uuid4, editable=False)
    Created = models.DateTimeField(auto_now_add=True)
    Updated = models.DateTimeField(auto_now=True)

    objects:AbstractManager = AbstractManager()

    def get_model_fields(self) -> list[str]:
        fields = self._meta.get_fields()
        attributes = [field.name for field in fields if field.concrete]
        return attributes
    class Meta:
        abstract = True


from rest_framework import serializers
from .models import AbstractModel

class AbstractModelSerializer(serializers.ModelSerializer):
    id = serializers.UUIDField(format='hex', source='PublicId', read_only=True)
    Created = serializers.DateTimeField(read_only=True)
    Updated = serializers.DateTimeField(read_only=True)

    class Meta:
        model:AbstractModel = AbstractModel
        read_only_fields = ['id', 'created', 'updated']

from django.shortcuts import render
from rest_framework.viewsets import ModelViewSet
from rest_framework.permissions import AllowAny, IsAuthenticatedOrReadOnly, IsAuthenticated
from rest_framework.status import HTTP_201_CREATED
from rest_framework.response import Response
from rest_framework.exceptions import NotFound, ValidationError
from django.core.exceptions import ObjectDoesNotExist, ValidationError
from .serializers import AbstractModelSerializer
from .models import AbstractManager
from .authenticationClasses import IsSiteManager, IsAdministrator, IsGrantee
from pprint import pprint
# Create your views here.

class AbstractModelViewSet(ModelViewSet):
    permission_classes = (IsAuthenticatedOrReadOnly,)
    http_method_names = ['get', 'post', 'patch']
    serializer_class : AbstractModelSerializer = AbstractModelSerializer

    def get_object(self):
        id = self.kwargs['pk']
        try:
            obj = self.get_queryset().get(PublicId=id)
        except (ObjectDoesNotExist, ValidationError, ValueError, TypeError):
            raise NotFound("Record Not Found")
        self.check_object_permissions(self.request, obj)
        return obj

    def get_query_keys(self) -> list[str]:
        query_params = self.request.GET
        query_list = list(query_params.keys())
        return query_list

    def get_model_attributes(self):
        model_fields = self.serializer_class.Meta.model._meta.get_fields()
        attribute_list = [field.name for field in model_fields if field.concrete]
        return attribute_list

    def get_queries(self) -> dict:
        model_attributes = self.get_model_attributes()
        key_words = {}
        for query in self.get_query_keys() :
            for attribute in model_attributes:
                if attribute in query: 
                    value = self.request.query_params.get(query)
                    if "__in" in query:
                        value = self.parse_unquoted_list(value)
                    key_words[query] = value
        return key_words
    
    def parse_unquoted_list(self, s:str):
        # Remove square brackets and strip whitespace
        s = s.strip("[]").strip()

        # Split on comma and strip each part
        elements = [item.strip() for item in s.split(",") if item.strip()]

        return elements
    def get_queryset(self):
        queries = self.get_queries()
        return self.serializer_class.Meta.model.objects.filter(**queries)

    def secondary_create(self, serializer_class: AbstractModelSerializer, data : dict[str], *args, **kwargs) -> str:
        serializer : AbstractModelSerializer = serializer_class(data=data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        return serializer.data['id']

    def create(self, request, *args, **kwargs):
        serializer : AbstractModelSerializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer=serializer)
        return Response(serializer.data, HTTP_201_CREATED)
    

class AbstractGranteeModelViewSet(AbstractModelViewSet):
    http_method_names = ('patch', 'get', 'post')
    permission_classes = (IsAuthenticated,)
    def get_authenticators(self):
        customAuthenticators = [IsGrantee()]
        return customAuthenticators

    def get_object(self):

        id = self.kwargs['pk']
        try:
            obj = self.get_queryset().get(PublicId=id)
        except (ObjectDoesNotExist, ValidationError, ValueError, TypeError):
            raise NotFound("Record Not Found")
        self.check_object_permissions(self.request, obj)
        return obj

    def get_queryset(self) -> AbstractManager :
        queries = self.get_queries()
        return self.serializer_class.Meta.model.objects.filter(**queries)

    def create(self, request, *args, **kwargs):
        pprint(request.data)
        serializer : AbstractModelSerializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer=serializer)
        return Response(serializer.data, HTTP_201_CREATED)

class AbstractAdministratorModelViewSet(AbstractGranteeModelViewSet):
    def get_authenticators(self):
        customAuthenticators = [IsAdministrator()]
        return customAuthenticators

class AbstractSiteManagerModelViewSet(AbstractAdministratorModelViewSet):
    http_method_names = ('patch', 'get', 'post', 'delete')
    permission_classes = (IsAuthenticated,)

    def get_authenticators(self):
        customAuthenticators = [IsSiteManager()]
        return customAuthenticators

from django.db import models
from django.utils import timezone
from core.abstract.models import AbstractManager, AbstractModel

class PermissionsManager(AbstractManager):

    pass

class AbstractPermission(AbstractModel):
    Name = models.CharField(max_length=100)
    Description = models.TextField()
    Citizens = models.ManyToManyField(to='citizen.Citizen')
    StartTime = models.DateTimeField()
    EndTime = models.DateTimeField()

    objects = PermissionsManager()
    @property
    def all_citizens(self):
        citizens : list[str] = []
        for citizen in self.Citizens:
            citizens.append(citizen.UserName)
        return citizens
    @property
    def permission_open(self):
        time = timezone.now()
        if time < self.StartTime:
            return False
        elif time > self.EndTime:
            return False
        else:
            return True

    def __str__(self):
        return f'\n\tName: {self.Name}, \n\tPermissionOpen: {self.permission_open}, \n\tCitizens: {self.Citizens}'

class AbstractLogManager(AbstractManager):
    
    pass

class AbstractLogModel(AbstractModel):
    Citizen = models.ForeignKey(to='citizen.Citizen', on_delete=models.PROTECT)
    Method = models.CharField()
    Object = models.CharField()
    RecordId = models.CharField(null=True)
    IpAddress = models.CharField(max_length=19)
    Message = models.CharField()

    objects : AbstractLogManager = AbstractLogManager()

    def __str__(self):
        return f'Log:: Citizen:{self.Citizen.UserName}, Method: {self.Method}, Record: {self.RecordId}, StatusCode: {self.StatusCode}'
    pass

from rest_framework import serializers
from core.abstract.serializers import AbstractModelSerializer
from core.citizen.models import Citizen
from core.citizen.serializers import PermissionCitizenSerializer
from core.citizen.serializers import StaffCitizenSerializer
from .models import AbstractLogModel
from .models import AbstractPermission

class AbstractPermissionSerializer(AbstractModelSerializer):
    Citizens = serializers.SlugRelatedField(queryset=Citizen.objects.all(), slug_field='PublicId', many=True)
    PermissionOpen = serializers.SerializerMethodField()

    def get_PermissionOpen(self, permission : AbstractPermission):
        return permission.permission_open

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Citizens'] = PermissionCitizenSerializer(instance.Citizens).data
        return data

    class Meta:
        model : AbstractPermission = AbstractPermission


class AbstractLogSerializer(AbstractModelSerializer):
    Citizen = serializers.SlugRelatedField(queryset=Citizen.objects.all(), slug_field="PublicId")

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Citizen'] = StaffCitizenSerializer(instance.Citizen).data
        return data

    class Meta:
        model : AbstractLogModel = AbstractLogModel
        fields : list[str] = [
            'id','Citizen', 'Method', 'Object', 'RecordId', 'Message', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id','Citizen', 'Method', 'Object', 'RecordId', 'Message', 'Created', 'Updated'
        ]

from core.abstract.viewset import AbstractAdministratorModelViewSet, AbstractSiteManagerModelViewSet, AbstractGranteeModelViewSet

class AdministratorLogViewSet(AbstractAdministratorModelViewSet):
    http_method_names = ('get')

class SiteManagerLogViewSet(AbstractSiteManagerModelViewSet):
    http_method_names = ('get')

class GranteeLogViewSet(AbstractGranteeModelViewSet):
    http_method_names = ('get')

from django.apps import AppConfig


class AdministratorConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.administrator'
    label = 'administrator'

from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from core.abstract.models import AbstractManager, AbstractModel
from django.core.validators import MinValueValidator, MaxValueValidator


# Create your models here.

class AdministratorManager(BaseUserManager, AbstractManager):
    pass

class Administrator(AbstractBaseUser, AbstractModel):
    AdministratorUserName = models.CharField(max_length=50, unique=True)
    Citizen = models.OneToOneField(to='citizen.Citizen', on_delete=models.PROTECT)
    FirstEmail = models.EmailField(unique=True)
    SecondEmail = models.EmailField(unique=True, null=True)
    GranteeLimit = models.IntegerField(validators=[
        MinValueValidator(10), MaxValueValidator(100)
    ])

    USERNAME_FIELD = 'AdministratorUserName'
    REQUIRED_FIELDS = ['AdministratorUserName']

    objects : AdministratorManager = AdministratorManager()

    def __str__(self):
        return f'Administrator Account: {self.AdministratorUserName}, {self.FirstEmail}, {self.SecondEmail}'


from rest_framework.serializers import CharField, SlugRelatedField
from django.contrib.auth.hashers import make_password
from core.abstract.serializers import AbstractModelSerializer
from core.citizen.serializers import StaffCitizenSerializer, Citizen
from .models import Administrator

class AdministratorModelSerializer(AbstractModelSerializer):
    Citizen = SlugRelatedField(queryset=Citizen.objects.all(), slug_field='PublicId')
    password = CharField(max_length=128, min_length=8, write_only=True, required=True)

    class Meta:
        model : Administrator = Administrator
        fields : list[str] = [
            'id', 'AdministratorUserName', 'Citizen', 'FirstEmail', 'SecondEmail', 'password', 'GranteeLimit',
            'Created', 'Updated'
        ]

        read_only_fields :list[str] = [
            'id', 'Created', 'Updated', 'GranteeLimit', 'Citizen'
        ]

        write_only_fields : list[str] = [
            'password'
        ]
    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Citizen'] = StaffCitizenSerializer(instance.Citizen).data
        return data

class SiteManagerAdministratorModelSerializer(AdministratorModelSerializer):
    password = CharField(max_length=128, min_length=8, write_only=True, required=True)

    class Meta:
        model : Administrator = Administrator
        fields : list[str] = [
            'id', 'AdministratorUserName', 'Citizen', 'FirstEmail', 'SecondEmail', 'GranteeLimit','password',
            'Created', 'Updated'
        ]
        read_only_fields :list[str] = [
            'id', 'Created', 'Updated'
        ]

        write_only_fields : list[str] = [
            'password'
        ]

    def validate_password(self, value: str) -> str:
        return make_password(value)

from django.shortcuts import render
from rest_framework.permissions import IsAuthenticated
from rest_framework.exceptions import PermissionDenied
from core.abstract.viewset import AbstractSiteManagerModelViewSet, AbstractAdministratorModelViewSet
from .serializers import SiteManagerAdministratorModelSerializer, AdministratorModelSerializer


# Create your views here.
class AdministratorModelViewSet(AbstractAdministratorModelViewSet):
    http_method_names = ('patch', 'get')
    serializer_class = AdministratorModelSerializer

    def get_object(self):
        obj = self.request.user.administrator
        self.check_object_permissions(self.request, obj=obj)
        return obj
    
    def get_queryset(self):
        PermissionDenied('Administrators Are Not Allowed To Access This Method')

class SiteManagerAdministratorModelViewSet(AbstractSiteManagerModelViewSet):
    serializer_class = SiteManagerAdministratorModelSerializer
    http_method_names = ('patch', 'get', 'post', 'delete')
    permission_classes = (IsAuthenticated,)

from django.apps import AppConfig


class AssociationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.association'
    label = 'association'

from django.db import models
from core.abstract.models import AbstractModel, AbstractManager

# Create your models here.
class AssociationManager(AbstractManager):

    pass

class Association(AbstractModel):
    Title = models.CharField(max_length=100, unique=True)
    Email = models.EmailField(unique=True)
    Department = models.ForeignKey(to='department.Department', on_delete=models.PROTECT)
    Description = models.TextField()
    Website = models.URLField(null=True)

    objects : AssociationManager = AssociationManager()

    @property
    def get_administrator(self):
        return self.Department.Administrator

    def __str__(self):
        return f'{self.Title}, {self.Email}, {self.Department.Administrator.AdministratorUserName}'

    pass

from rest_framework.serializers import SlugRelatedField
from core.abstract.serializers import AbstractModelSerializer
from core.department.models import Department
from core.department.serializers import AssociationDepartmentSerializer
from .models import Association

class CitizenAssociationModelSerializer(AbstractModelSerializer):
    Department = SlugRelatedField(queryset=Department.objects.all(), slug_field='PublicId')

    def to_representation(self, instance:Association):
        data = super().to_representation(instance)
        data['Department'] = AssociationDepartmentSerializer(instance.Department).data
        return data
    class Meta:
        model : Association = Association
        fields : list[str] = ['id','Title','Email','Department','Description', 'Website','Created', 'Updated']
        read_only_fields : list[str] = [
            'id','Title','Email', 'Department','Website','Description', 'Created', 'Updated'
        ]

class GranteeAssociationModelSerializer(CitizenAssociationModelSerializer):
    pass

class AdministratorAssociationModelSerializer(GranteeAssociationModelSerializer):

    class Meta:
        model : Association = Association
        fields : list[str] = ['id','Title','Email','Department','Website','Description', 'Created', 'Updated']
        read_only_fields : list[str] = [
            'id','Department', 'Created', 'Updated'
        ]

class SiteManagerAssociationModelSerializer(AdministratorAssociationModelSerializer):

    class Meta:
        model : Association = Association
        fields : list[str] = ['id','Title','Email','Department','Website','Description', 'Created', 'Updated']
        read_only_fields : list[str] = [
            'id', 'Created', 'Updated'
        ]

class PublicServiceAssociationSerializer(AbstractModelSerializer):
    Department = SlugRelatedField(queryset=Department.objects.all(), slug_field='PublicId')


    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Department'] = instance.Department.Title
        return data
    
    class Meta:
        model : Association = Association
        fields : list[str] = ['id','Title','Email','Department', 'Website']
        read_only_fields : list[str] = [
            'id','Title','Email', 'Department','Website'
        ]

class GranteeAssociationSerializer(AbstractModelSerializer):
    Department = SlugRelatedField(queryset=Department.objects.all(), slug_field='PublicId')

    class Meta:
        model : Association = Association
        fields : list[str] = ['id','Title','Email','Department', 'Website']
        read_only_fields : list[str] = [
            'id','Title','Email', 'Department','Website'
        ]
    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Department'] = instance.Department.Title
        return data

class PermissionAssociationSerializer(AbstractModelSerializer):
    Department = SlugRelatedField(queryset=Department.objects.all(), slug_field='PublicId')

    class Meta:
        model : Association = Association
        fields : list[str] = ['id','Title','Email','Department', 'Website']
        read_only_fields : list[str] = [
            'id','Title','Email', 'Department','Website'
        ]
    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Department'] = instance.Department.Title
        return data

from django.shortcuts import render
from django.db.transaction import atomic
from django.db.models import QuerySet
from django.db.utils import IntegrityError
from rest_framework.status import HTTP_201_CREATED
from rest_framework.response import Response
from rest_framework.exceptions import MethodNotAllowed, bad_request
from core.department.serializers import SiteManagerDepartmentSerializer
from core.abstract.viewset import AbstractGranteeModelViewSet, AbstractAdministratorModelViewSet, AbstractSiteManagerModelViewSet, AbstractModelViewSet
from .serializers import CitizenAssociationModelSerializer, GranteeAssociationModelSerializer, AdministratorAssociationModelSerializer, SiteManagerAssociationModelSerializer
from .models import Association
# Create your views here.
class CitizenAssociationModelViewSet(AbstractModelViewSet):
    http_method_names : tuple[str] = ('get',)
    serializer_class: CitizenAssociationModelSerializer = CitizenAssociationModelSerializer


class GranteeAssociationModelViewSet(AbstractGranteeModelViewSet):
    http_method_names = ('get',)
    serializer_class = GranteeAssociationModelSerializer

    def get_queryset(self):
        
        if hasattr(self.request.user, 'grantee'):
            grantee_association : Association = self.request.user.grantee.Association
            queries = self.get_queries()
            queries['PublicId'] = grantee_association.PublicId.hex
            # print(admin_department)
            return self.serializer_class.Meta.model.objects.filter(**queries)
        raise MethodNotAllowed

class AdministratorAssociationModelViewSet(AbstractAdministratorModelViewSet):
    http_method_names = ('get', 'patch', 'post')
    serializer_class = AdministratorAssociationModelSerializer

    def get_queryset(self):
        if hasattr(self.request.user, 'administrator'):
            if hasattr(self.request.user.administrator, 'department'):
                queries = self.get_queries()
                queries['Department'] = self.request.user.administrator.department
                # print(admin_department)
                # print(self.serializer_class.Meta.model.objects.filter(Department=admin_department))
                return self.serializer_class.Meta.model.objects.filter(**queries)
        raise MethodNotAllowed

    @atomic
    def create(self, request, *args, **kwargs):
        if hasattr(self.request.user.administrator, 'department'):
            request.data['Department'] = self.request.user.administrator.department.PublicId.hex
            serializer = SiteManagerAssociationModelSerializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            self.perform_create(serializer)
            return Response(serializer.data, HTTP_201_CREATED)
        raise MethodNotAllowed('You haven\'t been assigned to a department yet')

class SiteManagerAssociationModelViewSet(AbstractSiteManagerModelViewSet):
    http_method_names = ('get', 'patch', 'post')
    serializer_class = SiteManagerAssociationModelSerializer

    @atomic
    def create(self, request, *args, **kwargs):
        try:
                
            department = request.data.pop('Department', False)
            if not department:
                return bad_request('Missing field')
            elif type(department) == dict:
                serializer = SiteManagerDepartmentSerializer(data=department)
                serializer.is_valid(raise_exception=True)
                serializer.save()
                request.data['Department'] = serializer.data['id']
            else:
                request.data['Department'] = department
            return super().create(request, *args, **kwargs)
        except (IntegrityError) as e:
            return bad_request('Element Duplicate Element', e)


from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework_simplejwt.settings import api_settings
from rest_framework.fields import empty
from rest_framework.exceptions import AuthenticationFailed
from django.contrib.auth.models import update_last_login
from core.citizen.serializers import CitizenSerializer
from core.siteManager.serializers import SiteManagerSerializer
from pprint import pprint

INVALID_DATA = {
                    'access': 'denied',
                    'code': 'bad request'
                }
class LoginCitizenSerializer(TokenObtainPairSerializer):
    

    def validate(self, attrs):
        data =  super().validate(attrs)
        refresh = self.get_token(self.user)

        data['user'] = CitizenSerializer(self.user).data
        data['refresh'] = str(refresh)
        data['access'] = str(refresh.access_token)

        if api_settings.UPDATE_LAST_LOGIN:
            update_last_login(None, self.user)

        return data

class LoginSiteManagerSerializer(TokenObtainPairSerializer):
    ManagerPassword = None
    ManagerUserName = None
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.ManagerPassword = kwargs['data']['ManagerPassword']
        self.ManagerUserName = kwargs['data']['ManagerUserName']

    def validate(self, attrs):
        data =  super().validate(attrs)
        refresh = self.get_token(self.user)
        if hasattr(self.user, 'sitemanager'):
            # ManagerPassword, ManagerUserName = attrs['ManagerPassword'], attrs['ManagerUserName']
            if self.user.sitemanager.check_password(self.ManagerPassword) and self.ManagerUserName == self.user.sitemanager.ManagerUserName:
                data['user'] = SiteManagerSerializer(self.user.sitemanager).data
                data['refresh'] = str(refresh)
                data['access'] = str(refresh.access_token)
                if api_settings.UPDATE_LAST_LOGIN:
                    update_last_login(None, self.user)
                return data


        return INVALID_DATA

    def is_valid(self, *, raise_exception=False):
        return super().is_valid(raise_exception=raise_exception)

class LoginAdministratorSerializer(TokenObtainPairSerializer):
    AdministratorPassword = None
    AdministratorUserName = None
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.AdministratorPassword = kwargs['data']['AdministratorPassword']
        self.AdministratorUserName = kwargs['data']['AdministratorUserName']

    def validate(self, attrs):
        data =  super().validate(attrs)
        refresh = self.get_token(self.user)
        if hasattr(self.user, 'administrator'):
            # ManagerPassword, ManagerUserName = attrs['ManagerPassword'], attrs['ManagerUserName']
            if self.user.administrator.check_password(self.AdministratorPassword) and self.AdministratorUserName == self.user.administrator.AdministratorUserName:
                data['user'] = SiteManagerSerializer(self.user.administrator).data
                data['refresh'] = str(refresh)
                data['access'] = str(refresh.access_token)
                if api_settings.UPDATE_LAST_LOGIN:
                    update_last_login(None, self.user)
                return data


        return INVALID_DATA

class LoginGranteeSerializer(TokenObtainPairSerializer):
    GranteePassword = None
    GranteeUserName = None
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.GranteePassword = kwargs['data']['GranteePassword']
        self.GranteeUserName = kwargs['data']['GranteeUserName']

    def validate(self, attrs):
        data =  super().validate(attrs)
        refresh = self.get_token(self.user)
        if hasattr(self.user, 'grantee'):
            # ManagerPassword, ManagerUserName = attrs['ManagerPassword'], attrs['ManagerUserName']
            if self.user.grantee.check_password(self.GranteePassword) and self.GranteeUserName == self.user.grantee.GranteeUserName:
                data['user'] = SiteManagerSerializer(self.user.grantee).data
                data['refresh'] = str(refresh)
                data['access'] = str(refresh.access_token)
                if api_settings.UPDATE_LAST_LOGIN:
                    update_last_login(None, self.user)
                return data


        return INVALID_DATA

from rest_framework import serializers
from core.citizen.serializers import CitizenSerializer, Citizen

class RegisterCitizenSerializer(CitizenSerializer):
    password = serializers.CharField(max_length=128, min_length=8, write_only=True, required=True)

    class Meta:
        model = Citizen
        fields = [
            'id', 'UserName', 'Email', 'FirstName', 'SecondName', 'Surname', 'DOB', 'NationalId', 'password','is_active',
            'Updated', 'Created',
        ]
        read_only_fields = [
            'id', 'is_active', 'Created', 'Updated'
        ]
    
    def create(self, validated_data):
        return Citizen.objects.create(**validated_data)

from core.auth.serializers import LoginCitizenSerializer, LoginSiteManagerSerializer, LoginAdministratorSerializer, LoginGranteeSerializer, INVALID_DATA
from rest_framework.viewsets import ViewSet
from rest_framework.permissions import AllowAny
from rest_framework.status import HTTP_200_OK
from rest_framework.response import Response
from rest_framework.exceptions import AuthenticationFailed
from rest_framework_simplejwt.exceptions import TokenError, InvalidToken
from pprint import pprint

class LoginCitizenViewSet(ViewSet):
    serializer_class = LoginCitizenSerializer
    permission_classes = (AllowAny,)
    http_method_names = ['post']

    def create(self, request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data)
        try:
            serializer.is_valid(raise_exception=True)
        except TokenError as e:
            raise InvalidToken(e.args[0])
        return Response(serializer.validated_data, status=HTTP_200_OK)

class LoginGranteeViewSet(ViewSet):
    serializer_class = LoginGranteeSerializer
    permission_classes = (AllowAny,)
    http_method_names = ('post',)

    def create(self, request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data)
        try:
            serializer.is_valid(raise_exception=True)
        except TokenError as e:
            raise InvalidToken(e.args[0])
        data = serializer.validated_data
        # if data == INVALID_DATA:
        #     AuthenticationFailed()
        return Response(serializer.validated_data, HTTP_200_OK)

class LoginAdministratorViewSet(LoginGranteeViewSet):
    serializer_class = LoginAdministratorSerializer
class LoginSiteManagerViewSet(LoginAdministratorViewSet):
    serializer_class = LoginSiteManagerSerializer
    
from rest_framework.response import Response
from rest_framework_simplejwt.views import TokenRefreshView
from rest_framework.permissions import AllowAny
from rest_framework.status import HTTP_200_OK
from rest_framework.viewsets import ViewSet
from rest_framework_simplejwt.exceptions import TokenError, InvalidToken

class RefreshViewSet(ViewSet, TokenRefreshView):
    permission_classes = (AllowAny,)
    http_method_names = ['post']

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data = request.data)
        try:
            serializer.is_valid(raise_exception=True)
        except TokenError as e:
            raise InvalidToken(e.args[0])
        return Response(serializer.validated_data, status=HTTP_200_OK)

from django.db.transaction import atomic
from rest_framework.viewsets import ViewSet
from rest_framework.status import HTTP_201_CREATED
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from core.auth.serializers import RegisterCitizenSerializer
from rest_framework.permissions import AllowAny

class RegisterViewSet(ViewSet):
    http_method_names = ['post']
    permission_classes = (AllowAny,)
    serializer_class = RegisterCitizenSerializer
    
    @atomic
    def create(self,request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        citizen = serializer.save()
        refresh = RefreshToken.for_user(citizen)
        return Response({
            "citizen": serializer.data,
            "refresh": str(refresh),
            "access": str(refresh.access_token),
        }, status=HTTP_201_CREATED)


from django.apps import AppConfig


class AuthConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.auth'
    label = 'auth_citizen'
from django.apps import AppConfig


class CitizenConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.citizen'
    label = 'citizen'
from django.db import models
import uuid
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.core.exceptions import ObjectDoesNotExist
from rest_framework.exceptions import NotFound

# Create your models here.
class CitizenManager(BaseUserManager):
    def get_by_id(self, id):
        try:
            instance = self.get(PublicId=id)
            return instance
        except (ObjectDoesNotExist, ValueError, TypeError):
            raise NotFound('Could Not Find User')

    def create_user(self, UserName,Email, FirstName,Surname,NationalId,DOB,SecondName=None, password=None, **kwargs):
        """Create and return a `User` with an email, phone number, username and password."""
        if UserName is None: raise TypeError('Users must have a username.')
        if FirstName is None: raise TypeError('Users must have a first name .')
        if Surname is None: raise TypeError('Users must have a surname.')
        if NationalId is None: raise TypeError('Users must have a national identification number.')
        if DOB is None: raise TypeError('users must have a date of birth(DOB)')
        if Email is None: raise TypeError('Users must have an email.')
        if password is None: raise TypeError('User must have an email.')
        user = self.model(UserName=UserName, Email=self.normalize_email(Email), FirstName=FirstName, SecondName=SecondName,Surname=Surname,NationalId=NationalId,DOB=DOB, **kwargs)
        user.set_password(password)
        user.save(using=self._db)
        return user
    
class Citizen(AbstractBaseUser, PermissionsMixin):
    PublicId = models.UUIDField(unique=True, db_index=True, editable=False,default=uuid.uuid4)
    UserName = models.CharField(max_length=100, unique=True)
    FirstName = models.CharField(max_length=100)
    SecondName = models.CharField(max_length=100, null=True)
    Surname = models.CharField(max_length=100)
    NationalId = models.CharField(max_length=40)
    DOB = models.DateTimeField()
    Email = models.EmailField(unique=True)
    EmailVerified = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    is_superuser = models.BooleanField(default=False)
    Created = models.DateTimeField(auto_now_add=True)
    Updated = models.DateTimeField(auto_now=True)

    USERNAME_FIELD = 'Email'
    REQUIRED_FIELDS = ['UserName']

    objects: CitizenManager = CitizenManager()

    def __str__(self):
        return f'{self.UserName}, {self.Email}'
from rest_framework import serializers
from django.contrib.auth.hashers import make_password
from core.abstract.serializers import AbstractModelSerializer
from .models import Citizen

class CitizenSerializer(serializers.ModelSerializer):
    id = serializers.UUIDField(source='PublicId', read_only=True, format='hex')
    password = serializers.CharField(max_length=128, min_length=8, write_only=True, required=True)
    Created = serializers.DateTimeField(read_only=True)
    Updated = serializers.DateTimeField(read_only=True)

    def validate_password(self, value: str) -> str:
        return make_password(value)
    class Meta:
        model : Citizen = Citizen
        fields = [
            'id', 'UserName', 'Email', 'FirstName', 'SecondName', 'Surname', 'DOB', 'NationalId', 'password','is_active',
            'Updated', 'Created',
        ]
        read_only_fields = [
            'id', 'is_active', 'Created', 'Updated'
        ]

class GranteeCitizenModelSerializer(CitizenSerializer):
    class Meta:
        model : Citizen = Citizen
        fields = [
            'id', 'UserName', 'Email', 'FirstName', 'SecondName', 'Surname', 'DOB', 'NationalId','is_active',
            'Updated', 'Created',
        ]
        read_only_fields = [
            'id', 'UserName', 'Email', 'FirstName', 'SecondName', 'Surname', 'DOB', 'NationalId','is_active',
            'Updated', 'Created',
        ]

class AdministratorCitizenModelSerializer(GranteeCitizenModelSerializer):
    pass

class SiteManagerCitizenModelSerializer(AdministratorCitizenModelSerializer):
    pass

class StaffCitizenSerializer(AbstractModelSerializer):

    class Meta:
        model : Citizen = Citizen
        fields : list[str] = [
            'id', 'UserName', 'NationalId'
        ]
        read_only_fields : list[str] = [
            'id', 'UserName', 'NationalId'
        ]

class RequestCitizenSerializer(AbstractModelSerializer):
    class Meta:
        model : Citizen = Citizen
        fields : list[str] = [
            'id', 'UserName','Email', 'FirstName', 'SecondName',
        ]
        read_only_fields : list[str] = [
            'id', 'UserName','Email', 'FirstName', 'SecondName',
        ]
class PermissionCitizenSerializer(AbstractModelSerializer):
    class Meta:
        model : Citizen = Citizen
        fields : list[str] = [
            'id', 'UserName','Email', 'FirstName', 'SecondName',
        ]
        read_only_fields : list[str] = [
            'id', 'UserName','Email', 'FirstName', 'SecondName',
        ]
class ServiceSessionCitizenSerializer(AbstractModelSerializer):

    class Meta:
        model : Citizen = Citizen
        fields : list[str] = [
            'id', 'UserName', 'Email', 'FirstName', 'SecondName', 'NationalId'
        ]
        read_only_fields : list[str] = [
            'id', 'UserName','Email', 'FirstName', 'SecondName', 'NationalId'
        ]

from django.shortcuts import render
from rest_framework.viewsets import ModelViewSet
from rest_framework.exceptions import NotFound, PermissionDenied, server_error, MethodNotAllowed
from rest_framework.permissions import AllowAny, IsAuthenticated, IsAuthenticatedOrReadOnly
from core.abstract.viewset import AbstractSiteManagerModelViewSet, AbstractAdministratorModelViewSet, AbstractGranteeModelViewSet
from .serializers import CitizenSerializer, GranteeCitizenModelSerializer, AdministratorCitizenModelSerializer, SiteManagerCitizenModelSerializer
from .models import Citizen
from pprint import pprint
# Create your views here.

class CitizenViewSet(ModelViewSet):
    serializer_class = CitizenSerializer
    permission_classes = (IsAuthenticated,)
    http_method_names = ('get', 'patch')

    def update(self, request, *args, **kwargs):
        pprint(request.data)
        obj = super().update(request, *args, **kwargs)
        pprint(obj)
        return obj
    def get_queryset(self):
        raise PermissionDenied()

    def get_object(self):
        # id = self.kwargs['pk']
        # citizen = Citizen.objects.get_by_id(id)
        citizen = self.request.user
        try:
            self.check_object_permissions(self.request, citizen)
        except:
            server_error()
        return citizen
    def create(self, request, *args, **kwargs):
        raise MethodNotAllowed("This Endpoint Is not allowed")

class GranteeCitizenModelViewSet(AbstractGranteeModelViewSet):
    http_method_names = ('get')
    serializer_class = GranteeCitizenModelSerializer


class AdministratorCitizenModelViewSet(AbstractAdministratorModelViewSet):
    http_method_names = ('get', 'patch')
    serializer_class = AdministratorCitizenModelSerializer
class SiteManagerCitizenModelViewSet(AbstractSiteManagerModelViewSet):
    http_method_names = ('get')
    permission_classes = (IsAuthenticated,)
    serializer_class = SiteManagerCitizenModelSerializer



from django.apps import AppConfig


class DepartmentConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.department'
    label = 'department'

from django.db import models
from core.abstract.models import AbstractManager, AbstractModel

# Create your models here.
class DepartmentManager(AbstractManager):
    pass

class Department(AbstractModel):
    Title = models.CharField(max_length=100, unique=True)
    Administrator = models.OneToOneField(to='administrator.Administrator', on_delete=models.PROTECT)
    Description = models.TextField()
    Email = models.EmailField(unique=True)
    Telephone = models.CharField(unique=True)
    Website = models.URLField(unique=True)

    objects : DepartmentManager = DepartmentManager()

    def __str__(self):
        return f'{self.Title}, {self.Administrator.AdministratorUserName}, {self.Email}'
    
from core.abstract.serializers import AbstractModelSerializer
from rest_framework.serializers import SlugRelatedField
from core.administrator.models import Administrator
from .models import Department

class CitizenDepartmentSerializer(AbstractModelSerializer):
    Administrator = SlugRelatedField(queryset=Administrator.objects.all(), slug_field="PublicId")

    class Meta:
        model : Department = Department
        fields : list[str] = [
            'id', 'Title', 'Email', 'Administrator','Telephone', 'Website','Description', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id', 'Title', 'Email', 'Administrator','Telephone', 'Website','Description', 'Created', 'Updated'
        ]

class GranteeDepartmentSerializer(CitizenDepartmentSerializer):

    pass

class AdministratorDepartmentSerializer(GranteeDepartmentSerializer):

    pass

class SiteManagerDepartmentSerializer(AdministratorDepartmentSerializer):


    class Meta:
        model : Department = Department
        fields : list[str] = [
            'id', 'Title', 'Email', 'Administrator', 'Telephone', 'Website', 'Description', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id','Created', 'Updated'
        ]

class AssociationDepartmentSerializer(CitizenDepartmentSerializer):

    class Meta:
        model:Department = Department
        fields : list[str] =  [
            'id', 'Title', 'Email', 'Telephone', 'Website'
        ]
        read_only_fields : list[str] = [
            'id', 'Title', 'Email', 'Telephone', 'Website'
        ]

class PermissionDepartmentSerializer(CitizenDepartmentSerializer):

    class Meta:
        model:Department = Department
        fields : list[str] =  [
            'id', 'Title', 'Email', 'Telephone', 'Website'
        ]
        read_only_fields : list[str] = [
            'id', 'Title', 'Email', 'Telephone', 'Website'
        ]

from django.shortcuts import render
from django.db.transaction import atomic
from rest_framework.exceptions import bad_request, MethodNotAllowed
from core.administrator.serializers import SiteManagerAdministratorModelSerializer
from core.abstract.viewset import AbstractModelViewSet, AbstractAdministratorModelViewSet, AbstractSiteManagerModelViewSet, AbstractGranteeModelViewSet
from .serializers import CitizenDepartmentSerializer, GranteeDepartmentSerializer, AdministratorDepartmentSerializer, SiteManagerDepartmentSerializer

# Create your views here.

class CitizenDepartmentViewSet(AbstractModelViewSet):
    http_method_names = ('get',)
    serializer_class = CitizenDepartmentSerializer
    pass

class GranteeDepartmentViewSet(AbstractGranteeModelViewSet):
    http_method_names = ('get')
    serializer_class = GranteeDepartmentSerializer

class AdministratorDepartmentViewSet(AbstractAdministratorModelViewSet):
    http_method_names = ('get', 'patch')
    serializer_class = AdministratorDepartmentSerializer
    
    def get_queryset(self):
        if hasattr(self.request.user.administrator, 'department'):
            queries = self.get_queries()
            queries['PublicId'] = self.request.user.administrator.department.PublicId.hex
            return self.serializer_class.Meta.model.objects.filter(**queries)
        return MethodNotAllowed("Get")
class SiteManagerDepartmentViewSet(AbstractSiteManagerModelViewSet):

    serializer_class = SiteManagerDepartmentSerializer


    @atomic
    def create(self, request, *args, **kwargs):
        administrator = request.data.pop('Administrator', False)
        if not administrator:
            bad_request('Administrator Field is missing')
        elif type(administrator) == dict :
            serializer = SiteManagerAdministratorModelSerializer(data=administrator)
            serializer.is_valid(raise_exception=True)
            serializer.save()
            request.data['Administrator'] = serializer.data['id']
        else:
            request.data['Administrator'] = administrator
        return super().create(request, *args, **kwargs)
from django.apps import AppConfig


class GrantConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.grant'
    label = 'grant'
from django.db import models
from django.utils import timezone
from datetime import datetime
from core.abstract.models import AbstractManager, AbstractModel

# Create your models here.
class GrantManager(AbstractManager):
    pass

class Grant(AbstractModel):
    Message = models.CharField(max_length=300)
    Request = models.OneToOneField(to='request.Request', on_delete=models.PROTECT)
    Grantee = models.ForeignKey(to='grantee.Grantee', on_delete=models.PROTECT, null=True)
    Decline = models.BooleanField(default=False)
    StartDate = models.DateTimeField(null=True)
    EndDate = models.DateTimeField(null=True)

    objects : GrantManager = GrantManager()

    @property
    def granted(self):
        now = timezone.now()
        if self.Decline:
            return False
        elif self.StartDate == None:
            return False
        elif self.StartDate > now:
            return False
        elif self.EndDate < now:
            return False
        elif self.EndDate == None:
            return True
        return True

    def __str__(self):
        if self.Grantee:
            grantee = self.Grantee.GranteeUserName
        else:
            grantee = "N/A"
        return f'Grant: {self.Request.PublicId}, GranteeUserName-{grantee}, Decline:: {self.Decline}, Granted:: {self.granted}'

from rest_framework.serializers import SlugRelatedField, SerializerMethodField
from pprint import pprint
from core.abstract.serializers import AbstractModelSerializer
from core.request.models import Request
from core.request.serializers import GrantRequestSerializer
from core.grantee.models import Grantee
from core.grantee.serializers import GrantGranteeSerializer
from .models import Grant

class CitizenGrantSerializer(AbstractModelSerializer):
    Request = SlugRelatedField(queryset=Request.objects.all(), slug_field="PublicId")
    Granted = SerializerMethodField()

    def get_Granted(self, grant:Grant):
        return grant.granted

    def to_representation(self, instance : Grant):
        data = super().to_representation(instance)
        data['Request'] = GrantRequestSerializer(instance.Request).data
        return data
    class Meta:
        model : Grant = Grant
        fields : list[str] = [
            'id', 'Request', 'Decline', 'Granted', 'StartDate', 'EndDate', 'Message', 'Created', 'Updated'
        ]
        read_only_field : list[str] = [
            'id', 'Request', 'Decline', 'Granted', 'StartDate', 'EndDate', 'Message', 'Created', 'Updated'

        ]
    
class GranteeGrantSerializer(CitizenGrantSerializer):
    Grantee = SlugRelatedField(queryset=Grantee.objects.all(), slug_field="PublicId")

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Grantee'] = GrantGranteeSerializer(instance.Grantee).data
        pprint(data)
        return data

    class Meta:
        model : Grant = Grant
        fields : list[str] = [
            'id', 'Request', 'Grantee', 'Decline', 'Granted', 'StartDate', 'EndDate', 'Message', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id', 'Request', 'Created', 'Updated'
        ]

class AdministratorGrantSerializer(GranteeGrantSerializer):

    class Meta:
        model : Grant = Grant
        fields : list[str] = [
            'id', 'Request', 'Grantee', 'Decline', 'Granted', 'StartDate', 'EndDate', 'Message', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id', 'Request', 'Grantee', 'Decline', 'Granted', 'StartDate', 'EndDate', 'Message', 'Created', 'Updated'
        ]

class SiteManagerGrantSerializer(GranteeGrantSerializer):

    class Meta:
        model : Grant = Grant
        fields : list[str] = [
            'id', 'Request', 'Grantee', 'Decline', 'Granted', 'StartDate', 'EndDate', 'Message', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id', 'Request', 'Grantee', 'Decline', 'Granted', 'StartDate', 'EndDate', 'Message', 'Created', 'Updated'
        ]
from django.shortcuts import render
from rest_framework.exceptions import MethodNotAllowed
from core.abstract.viewset import AbstractModelViewSet, AbstractGranteeModelViewSet, AbstractAdministratorModelViewSet, AbstractSiteManagerModelViewSet
from core.request.models import Request
from core.department.models import Department
from core.association.models import Association
from .serializers import CitizenGrantSerializer, GranteeGrantSerializer, AdministratorGrantSerializer, SiteManagerGrantSerializer
from .models import Grant
# Create your views here.
class CitizenGrantViewSet(AbstractModelViewSet):
    serializer_class = CitizenGrantSerializer
    http_method_names = ('get')

    def get_queryset(self):
        queries = self.get_queries()
        queries['Request__Citizen'] = self.request.user
        return super().get_queryset().filter(**queries)

class GranteeGrantViewSet(AbstractGranteeModelViewSet):
    serializer_class = GranteeGrantSerializer
    http_method_names = ('get', 'patch')

    def get_queryset(self):
        if hasattr(self.request.user, 'grantee'):
            request = Request.objects.filter(PublicService__Grantee=self.request.user.grantee)
            queries = self.get_queries()
            queries['Request__in'] = request
            return self.serializer_class.Meta.model.objects.filter(**queries)
        else:
            raise MethodNotAllowed("GET")

    def update(self, request, *args, **kwargs):
        if hasattr(self.request.user, 'grantee'):
            request.data['Grantee'] = self.request.user.grantee.PublicId.hex
            return super().update(request, *args, **kwargs)
        else:
            raise MethodNotAllowed("PATCH")

class AdministratorGrantViewSet(AbstractAdministratorModelViewSet):
    serializer_class = AdministratorGrantSerializer
    http_method_names = ('get')

    def get_queryset(self):
        if hasattr(self.request.user, 'administrator'):
            department = Department.objects.get(Administrator=self.request.user.administrator)
            associations = Association.objects.filter(Department=department)
            requests = Request.objects.filter(PublicService__Association__in=associations)
            queries = self.get_queries()
            queries['Request__in'] = requests
            return self.serializer_class.Meta.model.objects.filter(**queries)
        else:
            raise MethodNotAllowed("GET")

class SiteManagerGrantViewSet(AbstractSiteManagerModelViewSet):
    serializer_class = SiteManagerGrantSerializer
    http_method_names = ('get')

from django.apps import AppConfig


class GranteeConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.grantee'
    label = 'grantee'

from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from core.abstract.models import AbstractModel, AbstractManager

class GranteeManager(AbstractManager):

    def create(self, **kwargs):
        if hasattr(kwargs['Administrator'], 'department'):
            if kwargs["Association"].Department == kwargs['Administrator'].department:
                return super().create(**kwargs)
    pass

# Create your models here.
class Grantee(AbstractBaseUser, AbstractModel):
    GranteeUserName = models.CharField(max_length=50, unique=True)
    Citizen = models.OneToOneField(to='citizen.Citizen', on_delete=models.PROTECT)
    Administrator = models.ForeignKey(to='administrator.Administrator', on_delete=models.PROTECT)
    Association = models.ForeignKey(to='association.Association', on_delete=models.DO_NOTHING)
    FirstEmail = models.EmailField(unique=True)
    SecondEmail = models.EmailField(unique=True, null=True)

    objects : GranteeManager = GranteeManager()
    USERNAME_FIELD = 'GranteeUserName'
    REQUIRED_FIELDS = ['GranteeUserName', 'Citizen', 'FirstEmail']
    def __str__(self):
        return f'Grantee Account: {self.GranteeUserName}, {self.FirstEmail}, {self.SecondEmail}'
from rest_framework.serializers import CharField, SlugRelatedField
from rest_framework.serializers import raise_errors_on_nested_writes
from rest_framework.utils import model_meta
from rest_framework.exceptions import ValidationError
from django.contrib.auth.hashers import make_password
from core.abstract.serializers import AbstractModelSerializer
from core.citizen.serializers import StaffCitizenSerializer, Citizen
from core.administrator.models import Administrator
from core.association.models import Association
from core.association.serializers import GranteeAssociationSerializer
from .models import Grantee

class GranteeSerializer(AbstractModelSerializer):
    Citizen = SlugRelatedField(queryset=Citizen.objects.all(), slug_field='PublicId')
    Administrator = SlugRelatedField(queryset=Administrator.objects.all(), slug_field='PublicId')
    Association = SlugRelatedField(queryset=Association.objects.all(), slug_field='PublicId')
    password = CharField(max_length=128, min_length=8, write_only=True, required=True)

    def validate_password(self, value: str) -> str:
        return make_password(value)
    
    def update(self, instance : Grantee, validated_data):
        raise_errors_on_nested_writes('update', self, validated_data)
        info = model_meta.get_field_info(instance)

        # Simply set each attribute on the instance, and then save it.
        # Note that unlike `.create()` we don't need to treat many-to-many
        # relationships as being a special case. During updates we already
        # have an instance pk for the relationships to be associated with.
        m2m_fields = []
        for attr, value in validated_data.items():
            if attr in info.relations and info.relations[attr].to_many:
                m2m_fields.append((attr, value))
            else:
                setattr(instance, attr, value)
        if hasattr(instance.Administrator, 'department'):
            if instance.Association.Department == instance.Administrator.department:
                instance.save()

                # Note that many-to-many fields are set after updating instance.
                # Setting m2m fields triggers signals which could potentially change
                # updated instance and we do not want it to collide with .update()
                for attr, value in m2m_fields:
                    field = getattr(instance, attr)
                    field.set(value)

                return instance
        raise ValidationError("administrator and association do not match")

    class Meta:
        model : Grantee = Grantee
        fields : list[str] = [
             'id','GranteeUserName', 'Association', 'Administrator', 'Citizen', 'FirstEmail', 'SecondEmail','password',
            'Created', 'Updated'
        ]
        write_only_fields : list[str] = [
            'password'
        ]
        read_only_fields : list[str] = [
            'id', 'Citizen', 'Association', 'Administrator', 'Created', 'Updated'
        ]

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Citizen'] = StaffCitizenSerializer(instance.Citizen).data
        data['Association'] = GranteeAssociationSerializer(instance.Association).data
        return data

class AdministratorGranteeSerializer(GranteeSerializer):
    password = CharField(max_length=128, min_length=8, write_only=True, required=True)
    
    class Meta:
        model : Grantee = Grantee
        fields : list[str] = [
             'id', 'GranteeUserName','Association',  'Administrator', 'Citizen', 'FirstEmail', 'SecondEmail','password',
            'Created', 'Updated'
        ]

        read_only_fields : list[str] = [
            'id', 'Created', 'Updated'
        ]

class SiteManagerGranteeSerializer(AdministratorGranteeSerializer):
    class Meta:
        model : Grantee = Grantee
        fields : list[str] = [
             'id', 'GranteeUserName', 'Association', 'Administrator', 'Citizen', 'FirstEmail', 'SecondEmail','password',
            'Created', 'Updated'
        ]

        read_only_fields : list[str] = [
            'id', 'Created', 'Updated'
        ]

class PublicServiceGranteeSerializer(AbstractModelSerializer):

    class Meta:
        model: Grantee = Grantee
        fields : list[str] = [
            'id', 'GranteeUserName'
        ]
        read_only_fields : list[str] = [
            'id', 'GranteeUserName'
        ]

class GrantGranteeSerializer(AbstractModelSerializer):

    class Meta:
        model: Grantee = Grantee
        fields : list[str] = [
            'id', 'GranteeUserName'
        ]
        read_only_fields : list[str] = [
            'id', 'GranteeUserName'
        ]
from django.shortcuts import render
from rest_framework.exceptions import PermissionDenied
from core.abstract.viewset import AbstractGranteeModelViewSet, AbstractAdministratorModelViewSet, AbstractSiteManagerModelViewSet
from core.association.models import Association
from .serializers import GranteeSerializer, AdministratorGranteeSerializer, SiteManagerGranteeSerializer

# Create your views here.
class GranteeModelsViewSet(AbstractGranteeModelViewSet):
    http_method_names = ('patch', 'get')
    serializer_class = GranteeSerializer

    def get_object(self):
        obj = self.request.user.grantee
        self.check_object_permissions(self.request, obj)
        return obj
    
    def get_queryset(self): #get grantees from the same association
        queries = self.get_queries()
        queries['PublicId'] = self.request.user.grantee.PublicId
        return self.serializer_class.Meta.model.objects.filter(**queries)

class AdministratorGranteeViewSet(AbstractAdministratorModelViewSet):
    serializer_class = AdministratorGranteeSerializer
    http_method_names = ('patch', 'get', 'post', 'delete')

    def get_queryset(self):
        if hasattr(self.request.user.administrator, 'department' ):
            department = self.request.user.administrator.department
            associations = Association.objects.filter(Department=department)
            queries = self.get_queries()
            queries['Association__in'] = associations
            return self.serializer_class.Meta.model.objects.filter(**queries)
        return PermissionDenied('You do not have a department')

    def create(self, request, *args, **kwargs):
        request.data['Administrator'] = self.request.user.administrator.PublicId.hex
        return super().create(request, *args, **kwargs)
    pass

class SiteManagerGranteeViewSet(AbstractSiteManagerModelViewSet):
    serializer_class = SiteManagerGranteeSerializer
    http_method_names = ('patch', 'get', 'post', 'delete')


from django.apps import AppConfig


class PublicserviceConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.publicService'
    label = 'publicService'

from django.db import models
from rest_framework.exceptions import ValidationError
from django.contrib.postgres.fields import ArrayField
from core.abstract.models import AbstractManager, AbstractModel
# from core.grantee.models import Grantee
from pprint import pprint

# Create your models here.
class PublicServiceManager(AbstractManager):

    def create(self, **kwargs):
        pprint(kwargs)
        for grantee in kwargs['Grantee'] :
            if kwargs['Association'] != grantee.Association: raise ValidationError("Association and Grantee Do not match")
        grantee = kwargs.pop('Grantee', [])
        model : PublicService = self.model(**kwargs)
        pprint(grantee)
        # model.Grantee.set(grantee)
        model.save(using=self._db)
        model.Grantee.set(grantee)
        model.save(using=self._db)
        return model

    pass

ALLOWED_METHODS = ['GET', 'POST', 'DELETE', 'PATCH']
DEFAULT_ALLOWED_METHODS = ['GET', 'POST', 'PATCH']
def default_methods():
    return [(m, m) for m in DEFAULT_ALLOWED_METHODS]

class Methods(models.Model):
    name = models.CharField(choices=default_methods(), unique=True)
class PublicService(AbstractModel):
    Title = models.CharField(max_length=100, unique=True)
    MachineName = models.CharField(max_length=150, unique=True)
    Description = models.TextField()
    Email = models.EmailField(unique=True)
    Grantee = models.ManyToManyField(to='grantee.Grantee')
    Association = models.ForeignKey(to='association.Association', on_delete=models.PROTECT)
    Methods = models.ManyToManyField(to=Methods, null=True)
    Restricted = models.BooleanField(default=False)
    URL = models.URLField(unique=True)
    Visibility = models.BooleanField(default=True)


    objects : PublicServiceManager = PublicServiceManager()

    @property
    def get_grantee(self):
        text = ''
        pprint(self.Grantee)
        for grantee in self.Grantee.all():
            text += f'\n\t\t {grantee.GranteeUserName}'
        pprint(text).__str__
        return text

    def __str__(self):
        return f'PublicService: \n\t{self.Title}, \n\tAssociation({self.Association}), \n\tEmail({self.Email}, \n\tGrantee({self.get_grantee}))'

from rest_framework.serializers import SlugRelatedField, raise_errors_on_nested_writes
from rest_framework.exceptions import ValidationError
from rest_framework.utils import model_meta
from core.abstract.serializers import AbstractModelSerializer
from core.association.models import Association
from core.association.serializers import PublicServiceAssociationSerializer
from core.grantee.models import Grantee
from core.grantee.serializers import PublicServiceGranteeSerializer
from .models import PublicService, Methods
from pprint import pprint

class CitizenPublicServiceSerializer(AbstractModelSerializer):
    Association = SlugRelatedField(queryset=Association.objects.all(), slug_field='PublicId')
    
    def to_representation(self, instance:PublicService):
        data = super().to_representation(instance)
        data['Association'] = PublicServiceAssociationSerializer(instance.Association).data
        return data

    def update(self, instance : PublicService, validated_data):
        raise_errors_on_nested_writes('update', self, validated_data)
        info = model_meta.get_field_info(instance)

        # Simply set each attribute on the instance, and then save it.
        # Note that unlike `.create()` we don't need to treat many-to-many
        # relationships as being a special case. During updates we already
        # have an instance pk for the relationships to be associated with.
        m2m_fields = []
        for attr, value in validated_data.items():
            if attr in info.relations and info.relations[attr].to_many:
                m2m_fields.append((attr, value))
            else:
                setattr(instance, attr, value)
        granteeError = []
        for grantee in instance.Grantee.all():
            if grantee.Association != instance.Association:
                granteeError.append(grantee)
        if len(granteeError) <= 0:

            instance.save()

            # Note that many-to-many fields are set after updating instance.
            # Setting m2m fields triggers signals which could potentially change
            # updated instance and we do not want it to collide with .update()
            for attr, value in m2m_fields:
                field = getattr(instance, attr)
                field.set(value)

            return instance
        raise ValidationError("Grantee does not belong to the association: %s", granteeError)

    def create(self, validated_data):
        return self.Meta.model.objects.create(**validated_data)
    class Meta:
        model : PublicService = PublicService
        fields : list[str] = [
            'id','Title', "MachineName", 'Email', 'Association','Restricted', 'Description', 'URL', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id','Title', "MachineName", 'Email', 'Association','Restricted', 'Description', 'URL', 'Created', 'Updated'
        ]

class GranteePublicServiceSerializer(CitizenPublicServiceSerializer):
    Grantee = SlugRelatedField(queryset=Grantee.objects.all(), slug_field='PublicId', many=True)
    Methods = SlugRelatedField(queryset=Methods.objects.all(), slug_field='name', many=True)

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Grantee'] = [ PublicServiceGranteeSerializer(grantee).data for grantee in instance.Grantee.all()]
        return data
    class Meta:
        model : PublicService = PublicService
        fields : list[str] = [
            'id','Title', "MachineName", 'Email', 'Association','Restricted', 'Methods', 'Description', 'URL', 'Grantee', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id','Title', "MachineName", 'Email', 'Association','Restricted', 'Methods', 'Description', 'URL', 'Grantee', 'Created', 'Updated'
        ]
    pass

class AdministratorPublicServiceSerializer(GranteePublicServiceSerializer):
    class Meta:
        model : PublicService = PublicService
        fields : list[str] = [
            'id','Title', "MachineName", 'Email', 'Association', 'Description', 'URL', 'Grantee', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id', 'Created', 'Updated'
        ]
    pass

class SiteManagerPublicServiceSerializer(AdministratorPublicServiceSerializer):
    pass

class RequestPublicServiceSerializer(AbstractModelSerializer):

    class Meta:
        model : PublicService = PublicService
        fields : list[str] = [
            'id','Title', "MachineName", 'URL'
        ]
        read_only_fields : list[str] =  [
            'id','Title', "MachineName", 'URL'
        ]

class PermissionPublicServiceSerializer(AbstractModelSerializer):

    class Meta:
        model : PublicService = PublicService
        fields : list[str] = [
            'id','Title', "MachineName", 'URL'
        ]
        read_only_fields : list[str] =  [
            'id','Title', "MachineName", 'URL'
        ]


class ServiceSessionPublicServiceSerializer(AbstractModelSerializer):

    class Meta:
        model : PublicService = PublicService
        fields : list[str] = [
            'id','Title', "MachineName", 'URL'
        ]
        read_only_fields : list[str] =  [
            'id','Title', "MachineName", 'URL'
        ]
from django.shortcuts import render
from django.db.transaction import atomic
from django.core.exceptions import ObjectDoesNotExist, ValidationError as ValidationError_Django
from rest_framework.exceptions import ValidationError, MethodNotAllowed, NotFound
from core.association.models import Association
from core.abstract.viewset import AbstractModelViewSet, AbstractGranteeModelViewSet, AbstractAdministratorModelViewSet, AbstractSiteManagerModelViewSet
from core.association.serializers import AdministratorAssociationModelSerializer, SiteManagerAssociationModelSerializer
from core.association.models import Association
from core.grantee.serializers import AdministratorGranteeSerializer, SiteManagerGranteeSerializer
from core.servicePermissions.models import AssociationPermission, DepartmentPermission, PublicServicePermission
from .serializers import CitizenPublicServiceSerializer, GranteePublicServiceSerializer, AdministratorPublicServiceSerializer, SiteManagerPublicServiceSerializer
# Create your views here.
class CitizenPublicServiceViewSet(AbstractModelViewSet):
    http_method_names : tuple[str] = ('get',)
    serializer_class = CitizenPublicServiceSerializer
    def get_object(self):
        id = self.kwargs['pk']
        obj = None
        for func in [self.getQ_PublicService_Association, self.getQ_PublicService_Department, self.getQ_PublicService_Restricted, self.getQ_PublicService_Service]:
            try:
                obj = func().get(PublicId=id)
                if obj:break
            except (ObjectDoesNotExist, ValidationError_Django, ValueError, TypeError):
                continue
        if obj:
            self.check_object_permissions(self.request, obj)
            return obj
        raise NotFound("Service Not Found")

    def getQ_PublicService_Service(self):
        publicServicePermissions = PublicServicePermission.objects.filter(Citizens=self.request.user)
        publicServices = []
        for permission in publicServicePermissions:
            publicServices.append(permission.PublicId.hex)
        queries = self.get_queries()
        queries["PublicId__in"] = publicServices
        return self.serializer_class.Meta.model.objects.filter(**queries)

    def getQ_PublicService_Association(self):
        associationPermission = AssociationPermission.objects.filter(Citizens=self.request.user)
        associations = []
        for permission in associationPermission:
            associations.append(permission.Association)
        queries = self.get_queries()
        queries["Association__in"] = associations
        return self.serializer_class.Meta.model.objects.filter(**queries)

    def getQ_PublicService_Department(self):
        departmentPermissions = DepartmentPermission.objects.filter(Citizens=self.request.user)
        departments = []
        for permission in departmentPermissions:
            departments.append(permission.Department)
        associations = Association.objects.filter(Department__in=departments)
        queries = self.get_queries()
        queries["Association__in"] = associations
        return self.serializer_class.Meta.model.objects.filter(**queries)
    
    def getQ_PublicService_Restricted(self):
        return self.serializer_class.Meta.model.objects.filter(Restricted=False)

    def get_queryset(self):
        by_association_permission = self.getQ_PublicService_Association()
        by_department_permission = self.getQ_PublicService_Department()
        by_service_permission = self.getQ_PublicService_Service()
        by_publicity = self.getQ_PublicService_Restricted()
        return by_publicity.union(by_department_permission).union(by_association_permission).union(by_service_permission)


class GranteePublicServiceViewSet(AbstractGranteeModelViewSet):
    http_method_names : tuple[str] = ('get',)
    serializer_class = GranteePublicServiceSerializer

    def get_queryset(self):
        queries = self.get_queries()
        queries['Grantee'] = self.request.user.grantee
        return self.serializer_class.Meta.model.objects.filter(**queries)

class AdministratorPublicServiceViewSet(AbstractAdministratorModelViewSet):
    http_method_names : tuple[str] = ('get', 'patch', 'post', 'delete')
    serializer_class = AdministratorPublicServiceSerializer

    def get_queryset(self):
        if hasattr(self.request.user.administrator, 'department'):
            department = self.request.user.administrator.department
            associations = Association.objects.filter(Department=department)
            queries = self.get_queries()
            queries['Association__in'] = associations
            return self.serializer_class.Meta.model.objects.filter(**queries)
        raise MethodNotAllowed('GET')
    @atomic
    def create(self, request, *args, **kwargs):
        association = request.data.pop('Association', False)
        grantee = request.data.pop('Grantee', False)
        if not association:
            raise ValidationError("Association missing")
        elif type(association) == dict:
            association = self.secondary_create(AdministratorAssociationModelSerializer, association)
        if not grantee:
            raise ValidationError("Grantee is missing")
        elif type(grantee) == dict:
            grantee = self.secondary_create(AdministratorGranteeSerializer, grantee)
        request.data['Association'] = association
        request.data['Grantee'] = grantee
        return super().create(request, *args, **kwargs)

class SiteManagerPublicServiceViewSet(AbstractSiteManagerModelViewSet):
    http_method_names : tuple[str] = ('get', 'patch', 'post', 'delete')
    serializer_class = SiteManagerPublicServiceSerializer
    @atomic
    def create(self, request, *args, **kwargs):
        association = request.data.pop('Association', False)
        grantee = request.data.pop('Grantee', False)
        if not association:
            raise ValidationError("Association is missing")
        elif type(association) == dict:
            association = self.secondary_create(SiteManagerAssociationModelSerializer, association)
        if not grantee:
            raise ValidationError("Grantee is missing")
        elif type(grantee) == dict:
            grantee = self.secondary_create(SiteManagerGranteeSerializer, grantee)
        request.data['Association'] = association
        request.data['Grantee'] = grantee
        return super().create(request, *args, **kwargs)

from django.apps import AppConfig


class RequestConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.request'
    label = 'request'
from django.db import models
from django.db.transaction import atomic
from rest_framework.exceptions import APIException
from core.abstract.models import AbstractManager, AbstractModel
from core.grant.models import Grant

# Create your models here.
class RequestManager(AbstractManager):

    @atomic
    def create(self, **kwargs):
        try:
            request = super().create(**kwargs)
            grant_data = {
                "Request": request,
                "Message": "N/A"
            }
            grant = Grant.objects.create(**grant_data)
            return request
        except:
            raise APIException('Failed to create request')
    pass

class Request(AbstractModel):
    Subject = models.CharField(max_length=50)
    Citizen = models.ForeignKey(to='citizen.Citizen', on_delete=models.PROTECT)
    PublicService = models.ForeignKey(to='publicService.PublicService', on_delete=models.PROTECT)
    Message = models.CharField(max_length=500)

    objects : RequestManager = RequestManager()

    def __str__(self):
        if hasattr(self, 'grant'):
            return f'Request:  {self.Citizen.Email}, {self.PublicService.Title}, {self.Message[:20]}, Grant:: {self.grant.granted}'
        else:
            return f'Request:  {self.Citizen.Email}, {self.PublicService.Title}, {self.Message[:20]}, Grant:: N/A'

from rest_framework.serializers import SlugRelatedField
from rest_framework.exceptions import APIException
from core.abstract.serializers import AbstractModelSerializer
from core.citizen.models import Citizen
from core.citizen.serializers import RequestCitizenSerializer
from core.publicService.models import PublicService
from core.publicService.serializers import RequestPublicServiceSerializer
from .models import Request

class CitizenRequestSerializer(AbstractModelSerializer):
    Citizen = SlugRelatedField(queryset=Citizen.objects.all(), slug_field='PublicId')
    PublicService = SlugRelatedField(queryset=PublicService.objects.all(), slug_field='PublicId')

    def to_representation(self, instance:Request):
        data = super().to_representation(instance)
        try:
            data['Citizen'] = RequestCitizenSerializer(instance.Citizen).data
            data['PublicService'] = RequestPublicServiceSerializer(instance.PublicService).data
            if hasattr(instance, 'grant'):
                data['Granted'] = instance.grant.granted
                return data
            else:
                raise Exception()
        except:
            raise APIException('Failed to produce data')

    class Meta:
        model : Request = Request
        fields : list[str] = [
            'id', 'Subject', 'Message', 'Citizen', 'PublicService', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id', 'Created', 'Updated'
        ]

class GranteeRequestSerializer(CitizenRequestSerializer):
    class Meta:
        model : Request = Request
        fields : list[str] = [
            'id', 'Subject', 'Message', 'Citizen', 'PublicService', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id', 'Subject', 'Message', 'Citizen', 'PublicService', 'Created', 'Updated'
        ]

class AdministratorRequestSerializer(GranteeRequestSerializer):
    pass

class SiteManagerRequestSerializer(AdministratorRequestSerializer):

    pass

class GrantRequestSerializer(AbstractModelSerializer):
    Citizen = SlugRelatedField(queryset=Citizen.objects.all(), slug_field='PublicId')
    PublicService = SlugRelatedField(queryset=PublicService.objects.all(), slug_field='PublicId')

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data["Citizen"] = instance.Citizen.UserName
        data['PublicService'] = instance.PublicService.Title
        return data

    class Meta:
        model : Request = Request
        fields : list[str] = [
            'id', 'Subject', 'Citizen', 'PublicService'
        ]
        read_only_fields : list[str] = [
            'id', 'Subject', 'Citizen', 'PublicService'
        ]

from django.shortcuts import render
from django.db.transaction import atomic
from rest_framework.exceptions import MethodNotAllowed
from core.abstract.viewset import AbstractModelViewSet, AbstractGranteeModelViewSet, AbstractAdministratorModelViewSet, AbstractSiteManagerModelViewSet
from core.department.models import Department
from core.association.models import Association
from .serializers import CitizenRequestSerializer, GranteeRequestSerializer, AdministratorRequestSerializer, SiteManagerRequestSerializer
# Create your views here.

class CitizenRequestViewSet(AbstractModelViewSet):
    serializer_class = CitizenRequestSerializer
    http_method_names = ('get', 'post', 'patch')

    def get_queryset(self):
        queries = self.get_queries()
        queries['Citizen'] = self.request.user
        return self.serializer_class.Meta.model.objects.filter(**queries)
    @atomic
    def create(self, request, *args, **kwargs):
        request.data['Citizen'] = self.request.user.PublicId.hex
        return super().create(request, *args, **kwargs)

class GranteeRequestViewSet(AbstractGranteeModelViewSet):
    serializer_class = GranteeRequestSerializer
    http_method_names = ('get')

    def get_queryset(self):
        if hasattr(self.request.user, 'grantee'):
            queries = self.get_queries()
            queries['PublicService__Grantee'] = self.request.user.grantee
            return self.serializer_class.Meta.model.objects.filter(**queries)
        else:
            raise MethodNotAllowed()

class AdministratorRequestViewSet(AbstractAdministratorModelViewSet):
    serializer_class = AdministratorRequestSerializer
    http_method_names = ('get')

    def get_queryset(self):
        if hasattr(self.request.user, 'administrator'):
            department = Department.objects.get(Administrator=self.request.user.administrator)
            associations = Association.objects.filter(Department=department)
            queries = self.get_queries()
            queries['PublicService__Association__in'] = associations
            return self.serializer_class.Meta.model.objects.filter(**queries)
        raise MethodNotAllowed()

class SiteManagerRequestViewSet(AbstractSiteManagerModelViewSet):
    serializer_class = SiteManagerRequestSerializer
    http_method_names = ('get')

from django.apps import AppConfig


class ServicepermissionsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.servicePermissions'
    label = 'servicePermissions'

from django.db import models
from core.abstract_circular.models import AbstractPermission
from datetime import datetime

# Create your models here.
class PublicServicePermission(AbstractPermission):
    PublicService = models.ForeignKey(to='publicService.PublicService', on_delete=models.CASCADE)

    def __str__(self):
        return f'PublicServicePermission: \n\tService:{self.PublicService.Title}, {super().__str__()}'

class AssociationPermission(AbstractPermission):
    Association = models.ForeignKey(to='association.Association', on_delete=models.CASCADE)

    def __str__(self):
        return f'AssociationPermission: \n\tAssocation: {self.Association.Title}, {super().__str__()}'
    
class DepartmentPermission(AbstractPermission):
    Department  = models.ForeignKey(to='department.Department', on_delete=models.CASCADE)

    def __str__(self):
        return f'DepartmentPermission: \n\tDepartment: {self.Department.Title}, {super().__str__()}'

from rest_framework.serializers import SlugRelatedField, SerializerMethodField
from core.abstract_circular.serializers import AbstractPermissionSerializer
from core.publicService.models import PublicService
from core.publicService.serializers import PermissionPublicServiceSerializer
from core.association.models import Association
from core.association.serializers import PermissionAssociationSerializer
from core.department.models import Department
from core.department.serializers import PermissionDepartmentSerializer
from .models import PublicServicePermission, AssociationPermission, DepartmentPermission

class PublicServicePermissionSerializer(AbstractPermissionSerializer):
    PublicService = SlugRelatedField(queryset=PublicService.objects.all(), slug_field='PublicId')

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['PublicService'] = PermissionPublicServiceSerializer(instance.PublicService).data
        return data
    
    class Meta:
        model : PublicServicePermission = PublicServicePermission
        fields : list[str] = [
            'id','Name', 'PermissionOpen', 'PublicService', 'Description' ,'StartTime', 'EndTime', 'Citizens', 'Created', 'Updated'
        ]
class AssociationPermissionSerializer(AbstractPermissionSerializer):
    Association = SlugRelatedField(queryset=Association.objects.all(), slug_field='PublicId')

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Association'] = PermissionAssociationSerializer(instance.Association).data
        return data
    
    class Meta:
        model : AssociationPermission = AssociationPermission
        fields : list[str] = [
            'id','Name', 'PermissionOpen', 'Association', 'Description' ,'StartTime', 'EndTime', 'Citizens', 'Created', 'Updated'
        ]

class DepartmentPermissionSerializer(AbstractPermissionSerializer):
    Department = SlugRelatedField(queryset=Department.objects.all(), slug_field='PublicId')

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Department'] = PermissionDepartmentSerializer(instance.Department).data
        return data

    class Meta:
        model : DepartmentPermission = DepartmentPermission
        fields : list[str] = [
            'id','Name', 'PermissionOpen', 'Department', 'Description' ,'StartTime', 'EndTime', 'Citizens', 'Created', 'Updated'
        ]

from django.shortcuts import render
from rest_framework.exceptions import MethodNotAllowed, ValidationError
from core.abstract.viewset import AbstractSiteManagerModelViewSet, AbstractAdministratorModelViewSet, AbstractGranteeModelViewSet
from core.association.models import Association
from core.publicService.models import PublicService
from core.department.models import Department
from core.grantee.models import Grantee
from .serializer import PublicServicePermissionSerializer, AssociationPermissionSerializer, DepartmentPermissionSerializer

# Create your views here.
class SiteManagerPublicServicePermissionViewSet(AbstractSiteManagerModelViewSet):
    http_method_names = ('get', 'patch', 'delete', 'post')
    serializer_class = PublicServicePermissionSerializer
    

class SiteManagerAssociationPermissionViewSet(AbstractSiteManagerModelViewSet):
    http_method_names = ('get', 'patch', 'delete', 'post')
    serializer_class = AssociationPermissionSerializer
    

class SiteManagerDepartmentPermissionViewSet(AbstractSiteManagerModelViewSet):
    http_method_names = ('get', 'patch', 'delete', 'post')
    serializer_class = DepartmentPermissionSerializer
    

class GranteePublicServicePermissionViewSet(AbstractGranteeModelViewSet):
    http_method_names = ('get', 'patch', 'delete', 'post')
    serializer_class = PublicServicePermissionSerializer
    
    def get_queryset(self):
        grantee : Grantee = self.request.user.grantee
        publicServices = PublicService.objects.filter(Grantee=grantee)
        queries = self.get_queries()
        queries['PublicService__in'] = publicServices
        return self.serializer_class.Meta.model.objects.filter(**queries)
    
    
    def create(self, request, *args, **kwargs):
        grantee = self.request.user.grantee
        publicServiceId = request.data.pop('PublicService', None)
        if publicServiceId == None:
            raise ValidationError('Invalid Service')
        if hasattr(grantee, 'association'):
            try:
                publicSrvc =PublicService.objects.filter(Grantee=grantee).get(PublicId=publicServiceId)
                request.data['PublicService'] = publicSrvc.PublicId.hex
            except:
                raise ValidationError('Invalid Service')

            return super().create(request, *args, **kwargs)
        raise ValidationError('You Do Not Belong to any Association')

class AdministratorPublicServicePermissionViewSet(AbstractAdministratorModelViewSet):
    http_method_names = ('get', 'patch', 'delete', 'post')
    serializer_class = PublicServicePermissionSerializer
    
    def get_queryset(self):
        administrator = self.request.user.administrator
        if hasattr(administrator, 'department'):
            associations = Association.objects.filter(Department=administrator.department)
            publicServices = PublicService.objects.filter(Association__in=associations)
            queries = self.get_queries()
            queries['PublicService__in'] = publicServices
            return self.serializer_class.Meta.model.objects.filter(**queries)
        raise MethodNotAllowed()
    
    def create(self, request, *args, **kwargs):
        administrator = self.request.user.administrator
        publicServiceId = request.data.pop('PublicService', None)
        if publicServiceId == None:
            raise ValidationError('Invalid Service')
        if hasattr(administrator, 'department'):
            try:
                associations = Association.objects.filter(Department=administrator.department)
                publicSrvc =PublicService.objects.filter(Association__in=associations).get(PublicId=publicServiceId)
                request.data['PublicService'] = publicSrvc.PublicId.hex
            except:
                raise ValidationError('Invalid Service')

            return super().create(request, *args, **kwargs)
        raise MethodNotAllowed('You Do Not Belong to Any Department')


class AdministratorAssociationPermissionViewSet(AbstractAdministratorModelViewSet):
    http_method_names = ('get', 'patch', 'delete', 'post')
    serializer_class = AssociationPermissionSerializer
    
    def get_queryset(self):
        administrator = self.request.user.administrator
        if hasattr(administrator, 'department'):
            associations = Association.objects.filter(Department=administrator.department)
            queries = self.get_queries()
            queries['Association__in'] = associations
            return self.serializer_class.Meta.model.objects.filter(**queries)
        raise MethodNotAllowed('You Do Not Belong to Any Department')
    
    def create(self, request, *args, **kwargs):
        administrator = self.request.user.administrator
        associationId = request.data.pop('Association', None)
        if associationId == None:
            raise ValidationError('Invalid Association')
        if hasattr(administrator, 'department'):
            try:
                association = Association.objects.filter(Department=administrator.department).get(PublicId=associationId)
                request.data['Association'] = association.PublicId.hex
            except:
                raise ValidationError('Invalid Association')

            return super().create(request, *args, **kwargs)
        raise MethodNotAllowed('You Do Not Belong to Any Department')

class AdministratorDepartmentPermissionViewSet(AbstractAdministratorModelViewSet):
    http_method_names = ('get', 'patch', 'delete', 'post')
    serializer_class = DepartmentPermissionSerializer

    def get_queryset(self):
        administrator = self.request.user.administrator
        if hasattr(administrator, 'department'):
            queries = self.get_queries()
            queries['Department'] = administrator.department
            return self.serializer_class.Meta.model.objects.filter(**queries)
        raise MethodNotAllowed('You Do Not Belong to Any Department')
    
    def create(self, request, *args, **kwargs):
        administrator = self.request.user.administrator
        if hasattr(administrator, 'department'):
            request.data['Department'] = administrator.department.PublicId.hex
            return super().create(request, *args, **kwargs)
        raise MethodNotAllowed('You Do Not Belong to Any Department')
from django.apps import AppConfig


class ServicesessionConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.serviceSession'
    label = 'serviceSession'

from django.db import models
from django.conf import settings
from django.utils import timezone
from core.abstract.models import AbstractModel, AbstractManager

# Create your models here.
class ServiceSessionManager(AbstractManager):

    def create(self, **kwargs):
        kwargs['LastSeen'] = timezone.now()
        return super().create(**kwargs)

    pass

class ServiceSession(AbstractModel):
    Citizen = models.ForeignKey(to='citizen.Citizen', on_delete=models.PROTECT)
    Service = models.ForeignKey(to='publicService.PublicService', on_delete=models.DO_NOTHING)
    IpAddress = models.CharField(max_length=19)
    LastSeen = models.DateTimeField(null=True)
    EnforceExpiry = models.BooleanField(default=False)

    objects : ServiceSessionManager = ServiceSessionManager()

    @property
    def expired(self):
        try:
            sessionHours: int = getattr(settings, "DEFAULT_SESSION_TIME", None)

            if self.EnforceExpiry:
                return True
            if sessionHours is None:
                return False
            
            expiration_time = self.LastSeen + timezone.timedelta(hours=sessionHours)
            return timezone.now() > expiration_time
        except:
            return True

from rest_framework import serializers
from core.abstract.serializers import AbstractModelSerializer
from core.citizen.models import Citizen as CitizenModel
from core.publicService.models import PublicService
from core.citizen.serializers import ServiceSessionCitizenSerializer
from core.publicService.serializers import ServiceSessionPublicServiceSerializer
from .models import ServiceSession

class GranteeServiceSessionSerializer(AbstractModelSerializer):

    Citizen = serializers.SlugRelatedField(queryset=CitizenModel.objects.all(), slug_field="PublicId")
    Service = serializers.SlugRelatedField(queryset=PublicService.objects.all(), slug_field="PublicId")
    Expired = serializers.SerializerMethodField()

    def get_Expired(self, serviceSession : ServiceSession) -> bool:
        return serviceSession.expired

    def to_representation(self, instance) -> dict:
        data = super().to_representation(instance)
        data['Citizen'] = ServiceSessionCitizenSerializer(instance.Citizen).data
        data['Service'] = ServiceSessionPublicServiceSerializer(instance.Service).data
        return data
    class Meta:
        model : ServiceSession = ServiceSession
        fields : list[str] = [
            'id', 'Citizen', 'Service', "IpAddress", 'EnforceExpiry', 'LastSeen', 'Expired', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id', 'Citizen', 'Service', "IpAddress", 'EnforceExpiry', 'LastSeen', 'Expired', 'Created', 'Updated'
        ]

class AdministratorServiceSessionSerializer(GranteeServiceSessionSerializer):

    class Meta:
        model : ServiceSession = ServiceSession
        fields : list[str] = [
            'id', 'Citizen', 'Service', "IpAddress", 'EnforceExpiry', 'LastSeen', 'Expired', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id', 'Citizen', 'Service', "IpAddress", 'EnforceExpiry', 'LastSeen', 'Expired', 'Created', 'Updated'
        ]

class SiteManagerServiceSessionSerializer(GranteeServiceSessionSerializer):

    class Meta:
        model : ServiceSession = ServiceSession
        fields : list[str] = [
            'id', 'Citizen', 'Service', "IpAddress", 'EnforceExpiry', 'LastSeen', 'Expired', 'Created', 'Updated'
        ]
        read_only_fields : list[str] = [
            'id', 'Created', 'Expired', 'Updated'
        ]

from django.shortcuts import render
from core.abstract.viewset import AbstractAdministratorModelViewSet, AbstractGranteeModelViewSet, AbstractSiteManagerModelViewSet
from .serializers import SiteManagerServiceSessionSerializer, AdministratorServiceSessionSerializer, GranteeServiceSessionSerializer
from datetime import datetime, timezone
from django.utils import timezone as djTimezone


# Create your views here.
class GranteeServiceSessionViewSet(AbstractGranteeModelViewSet):
    serializer_class = GranteeServiceSessionSerializer
    http_method_names = ('get')


class AdministratorServiceSessionViewSet(AbstractAdministratorModelViewSet):
    serializer_class = AdministratorServiceSessionSerializer
    http_method_names = ('get')

class SiteManagerServiceSessionViewSet(AbstractSiteManagerModelViewSet):
    serializer_class = SiteManagerServiceSessionSerializer
    http_method_names = ('get', 'post', 'patch')

    def update(self, request, *args, **kwargs):
        dt = djTimezone.now()
        formatted = dt.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        if request.data == {}:
            request.data["LastSeen"] =  formatted
        elif hasattr(request.data , "LastSeen"):
            outcome = request.data.pop("LastSeen")
        return super().update(request, *args, **kwargs)

from django.apps import AppConfig


class SitemanagerConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.siteManager'
    label = 'siteManager'
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from core.abstract.models import AbstractManager, AbstractModel
from rest_framework.exceptions import PermissionDenied

# Create your models here.
class SiteManagerManager(BaseUserManager, AbstractManager):

    def create(self, **kwargs):
        if self.all().count() > 0:
            raise PermissionDenied('There Should Only Be One Site Manager.')
        return super().create(**kwargs)
    pass

class SiteManager(AbstractBaseUser, AbstractModel):
    ManagerUserName = models.CharField(unique=True, max_length=100)
    Citizen = models.OneToOneField(to='citizen.Citizen', on_delete=models.PROTECT)
    FirstEmail = models.EmailField(unique=True)
    SecondEmail = models.EmailField(unique=True, null=True)

    objects : SiteManagerManager = SiteManagerManager()
    USERNAME_FIELD = 'FirstEmail'
    REQUIRED_FIELDS = ['ManagerUserName']

    def __str__(self):
        return f'Site Manager Account: {self.ManagerUserName}, {self.FirstEmail}, {self.SecondEmail}'

from core.abstract.serializers import AbstractModelSerializer
from core.siteManager.models import SiteManager
from core.citizen.serializers import StaffCitizenSerializer

class SiteManagerSerializer(AbstractModelSerializer):

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['Citizen'] = StaffCitizenSerializer(instance.Citizen).data
        return data

    class Meta:
        model : SiteManager = SiteManager
        fields = [
            'id', 'ManagerUserName', 'Citizen', 'FirstEmail', 'SecondEmail', 'Created', 'Updated'
        ]
        read_only_fields = [
            'id', 'ManagerUserName', 'Citizen', 'FirstEmail', 'SecondEmail', 'Created', 'Updated'
        ]
from django.shortcuts import render
from rest_framework.permissions import IsAuthenticated
from core.abstract.viewset import AbstractSiteManagerModelViewSet
from .serializers import SiteManagerSerializer



# Create your views here.
class SiteManagerModelViewSet(AbstractSiteManagerModelViewSet):
    http_method_names = ('get', 'patch',)
    serializer_class = SiteManagerSerializer
    permission_classes = (IsAuthenticated,)

    def get_object(self):
        return self.request.user.sitemanager

    def get_queryset(self):
        return self.serializer_class.Meta.model.objects.all()


from django.apps import AppConfig


class SystemlogConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.systemLog'
    label = 'systemLog'
from django.db import models
from core.abstract_circular.models import AbstractLogModel, AbstractLogManager

# Create your models here.
class CitizenLogManager(AbstractLogManager):

    pass 

class CitizenLog(AbstractLogModel):
    
    objects : CitizenLogManager = CitizenLogManager()

    def __str__(self):
        return f'LOG:: \n\tCitizen: {self.Citizen.UserName}, \n\tObject: {self.Object} \n\tMethod: {self.Method}'
class GranteeLogManager(AbstractLogManager):
    pass
class GranteeLog(AbstractLogModel):
    Grantee = models.CharField()

    objects : GranteeLogManager = GranteeLogManager()

    def __str__(self):
        return f'LOG:: \n\tCitizen: {self.Citizen} \n\tGrantee: {self.Grantee.GranteeUserName}, \n\tObject: {self.Object} \n\tMethod: {self.Method}'

class AdministratorLogManager(AbstractLogManager):

    pass

class AdministratorLog(AbstractLogModel):
    Administrator = models.CharField()
    
    objects : AdministratorLogManager = AdministratorLogManager()

    def __str__(self):
        return f'LOG:: \n\tCitizen: {self.Citizen.UserName} \n\tAdministrator: {self.Administrator}, \n\tObject: {self.Object} \n\tMethod: {self.Method}'


class SiteManagerLogManager(AbstractLogManager):

    pass
class SiteManagerLog(AbstractLogModel):
    SiteManager  = models.CharField()
    objects : SiteManagerLogManager = SiteManagerLogManager()

    def __str__(self):
        return f'LOG:: \n\tCitizen: {self.Citizen.UserName} \n\tManager: {self.SiteManager}, \n\tObject: {self.Object} \n\tMethod: {self.Method}'
from rest_framework.serializers import SlugRelatedField
from core.siteManager.models import SiteManager
from core.administrator.models import Administrator
from core.citizen.models import Citizen
from core.grantee.models import Grantee
from core.abstract_circular.serializers import AbstractLogSerializer
from .models import CitizenLog, GranteeLog, AdministratorLog, SiteManagerLog


class SiteManagerLogSerializer(AbstractLogSerializer):
    Citizen = SlugRelatedField(queryset=Citizen.objects.all(), slug_field='PublicId')
    
    class Meta:
        model : SiteManagerLog = SiteManagerLog
        fields : list[str] = [
            'id','Citizen', 'IpAddress', 'SiteManager', 'Method', 'Object', 'RecordId', 'Message', 'Created', 'Updated'

        ]

class AdministratorLogSerializer(AbstractLogSerializer):
    Citizen = SlugRelatedField(queryset=Citizen.objects.all(), slug_field='PublicId')

    class Meta:
        model : AdministratorLog = AdministratorLog
        fields : list[str] = [
            'id','Citizen', 'IpAddress', 'Administrator', 'Method', 'Object', 'RecordId', 'Message', 'Created', 'Updated'

        ]

class GranteeLogSerializer(AbstractLogSerializer):
    Citizen = SlugRelatedField(queryset=Citizen.objects.all(), slug_field='PublicId')

    class Meta:
        model : GranteeLog = GranteeLog
        fields : list[str] = [
            'id','Citizen', 'IpAddress', 'Grantee', 'Method', 'Object', 'RecordId', 'Message', 'Created', 'Updated'

        ]

class CitizenLogSerializer(AbstractLogSerializer):
    Citizen = SlugRelatedField(queryset=Citizen.objects.all(), slug_field='PublicId')

    class Meta:
        model : CitizenLog = CitizenLog
        fields : list[str] = [
            'id','Citizen', 'IpAddress', 'Method', 'Object', 'RecordId', 'Message', 'Created', 'Updated'

        ]
from core.systemCron.models import SystemCron, systemLog
from rest_framework.status import HTTP_201_CREATED
from core.systemLog.serializers import CitizenLogSerializer, SiteManagerLogSerializer, AdministratorLogSerializer, GranteeLogSerializer
from core.abstract_circular.serializers import AbstractLogSerializer
from core.abstract.kafka import NewKafkaConsumer
from core.abstract_circular.viewsets import AdministratorLogViewSet, SiteManagerLogViewSet, GranteeLogViewSet
from .serializers import CitizenLogSerializer, GranteeLogSerializer, AdministratorLogSerializer, SiteManagerLogSerializer
from pprint import pprint
from django.utils import timezone
from threading import Thread
from django.conf import settings
from rest_framework.response import Response
import logging
import json

logger = logging.getLogger(__name__)

# Create your views here.
class GranteeCitizenLogViewSet(GranteeLogViewSet):
    serializer_class = CitizenLogSerializer

class AdministratorCitizenLogViewSet(AdministratorLogViewSet):
    serializer_class = CitizenLogSerializer

class AdministratorGranteeLogViewSet(AdministratorLogViewSet):
    serializer_class = GranteeLogSerializer

class SiteManagerCitizenLogViewSet(SiteManagerLogViewSet):
    serializer_class = CitizenLogSerializer

class SiteManagerGranteeLogViewSet(SiteManagerLogViewSet):
    serializer_class = GranteeLogSerializer

class SiteManagerAdministratorLogViewSet(SiteManagerLogViewSet):
    serializer_class = AdministratorLogSerializer

class SiteManagerManagerLogViewSet(SiteManagerLogViewSet):
    http_method_names = ('post', 'get')
    serializer_class = SiteManagerLogSerializer

    def createLog(self, data:dict, serializer_class: AbstractLogSerializer):
        try:
            serializer : AbstractLogSerializer = serializer_class(data=data)
            serializer.is_valid(raise_exception=True)
            serializer.save()
            return serializer.data
        except Exception as e:
            return False

    def create(self, request, *args, **kwargs):
        data: dict = request.data
        administrator = data.pop('Administrator', None)
        siteManager = data.pop('SiteManager', None)
        grantee = data.pop('SiteManager', None)
        if (administrator != None ):
            data['Administrator'] = administrator
            outcome  = self.createLog(data, AdministratorLogSerializer)
        if (siteManager != None ):
            data['SiteManager'] = siteManager
            outcome = self.createLog(data, SiteManagerLogSerializer)
        if (grantee != None ):
            data['Grantee'] = grantee
            outcome = self.createLog(data, GranteeLogSerializer)
        else:
            outcome = self.createLog(data, CitizenLogSerializer)
        return Response(outcome, HTTP_201_CREATED)

[{"model": "core.abstractpermission", "pk": 1, "fields": {"PublicId": "54d643cc-4c00-4d46-ab02-12c4eeb81969", "Created": "2025-04-01T08:20:51.676Z", "Updated": "2025-04-01T19:02:32.545Z", "Name": "Test Permission", "Description": "Test permission", "StartTime": "2025-04-01T10:19:00Z", "EndTime": "2025-05-04T10:19:00Z", "Citizens": [10]}}, {"model": "core.abstractpermission", "pk": 2, "fields": {"PublicId": "22a8e0bd-a83f-48fa-9e9c-6f23bfb9ab05", "Created": "2025-04-01T08:24:48.863Z", "Updated": "2025-04-01T08:24:48.863Z", "Name": "Test Permission", "Description": "Test permission", "StartTime": "2025-04-01T10:19:00Z", "EndTime": "2025-05-04T10:19:00Z", "Citizens": [10]}}, {"model": "core.abstractpermission", "pk": 3, "fields": {"PublicId": "b938ec16-524a-48ff-ab02-abffa51cac14", "Created": "2025-04-03T07:58:23.257Z", "Updated": "2025-04-03T07:59:05.460Z", "Name": "UzStudents", "Description": "uz stufffff", "StartTime": "2025-04-03T08:54:00Z", "EndTime": "2025-05-03T07:54:00Z", "Citizens": [10, 11]}}, {"model": "core.abstractpermission", "pk": 4, "fields": {"PublicId": "670055d0-a225-467c-a7f5-0a7d3d4f4294", "Created": "2025-04-03T08:01:26.570Z", "Updated": "2025-04-03T08:01:26.570Z", "Name": "Test Manager Permission", "Description": "Test manager", "StartTime": "2025-04-03T07:59:00Z", "EndTime": "2025-05-03T07:59:00Z", "Citizens": [6]}}, {"model": "core.abstractpermission", "pk": 5, "fields": {"PublicId": "fcf32ac4-c344-4524-9710-1a1cf810b214", "Created": "2025-04-03T08:50:35.973Z", "Updated": "2025-04-03T08:56:57.661Z", "Name": "test google service permission", "Description": "allow google", "StartTime": "2025-04-05T08:33:00Z", "EndTime": "2025-05-03T08:33:00Z", "Citizens": [1]}}, {"model": "core.abstractpermission", "pk": 6, "fields": {"PublicId": "7cc5b350-0cb0-4e12-9033-f748bd52c4dd", "Created": "2025-04-03T08:54:48.781Z", "Updated": "2025-04-03T08:54:48.781Z", "Name": "testAdminAssociation", "Description": "hshh", "StartTime": "2025-04-03T08:50:00Z", "EndTime": "2025-05-03T08:50:00Z", "Citizens": [6]}}, {"model": "core.abstractpermission", "pk": 7, "fields": {"PublicId": "d4908665-c4dc-4c71-be34-7126bcefa531", "Created": "2025-04-03T09:41:43.763Z", "Updated": "2025-04-03T09:41:43.763Z", "Name": "User5", "Description": "User5", "StartTime": "2025-04-03T09:41:00Z", "EndTime": "2025-05-03T09:41:00Z", "Citizens": [7]}}, {"model": "core.abstractpermission", "pk": 8, "fields": {"PublicId": "f3466fa4-67b2-4f75-b8a0-cbf2faf0c318", "Created": "2025-04-03T09:44:13.648Z", "Updated": "2025-04-03T09:44:13.648Z", "Name": "User5", "Description": "User5", "StartTime": "2025-04-03T09:42:00Z", "EndTime": "2025-05-03T09:42:00Z", "Citizens": [7]}}, {"model": "core.abstractpermission", "pk": 9, "fields": {"PublicId": "12325a22-02cd-497e-b112-c1eee2736011", "Created": "2025-04-03T10:08:13.645Z", "Updated": "2025-04-03T10:08:13.645Z", "Name": "User5", "Description": "User5", "StartTime": "2025-04-03T10:07:00Z", "EndTime": "2025-05-03T10:07:00Z", "Citizens": [7]}}, {"model": "core.abstractpermission", "pk": 10, "fields": {"PublicId": "db96e072-0fba-47d0-9691-eb5cbd5316dc", "Created": "2025-04-04T08:30:40.026Z", "Updated": "2025-04-04T08:30:40.026Z", "Name": "UzStud", "Description": "test", "StartTime": "2025-04-04T08:29:00Z", "EndTime": "2025-05-04T08:29:00Z", "Citizens": [1, 8, 9, 10, 11]}}, {"model": "core.abstractpermission", "pk": 11, "fields": {"PublicId": "34cc8b48-673b-4631-83b6-0f976251164e", "Created": "2025-04-29T12:16:47.994Z", "Updated": "2025-04-29T12:16:47.994Z", "Name": "User9", "Description": "stuff", "StartTime": "2025-04-29T12:15:00Z", "EndTime": "2025-05-29T12:15:00Z", "Citizens": [10]}}, {"model": "core.abstractpermission", "pk": 12, "fields": {"PublicId": "b2f2c3ea-9c2c-476f-acad-edc7f32a7d13", "Created": "2025-04-30T13:06:45.219Z", "Updated": "2025-04-30T13:06:45.220Z", "Name": "Department uz", "Description": "testing", "StartTime": "2025-04-30T13:05:00Z", "EndTime": "2025-05-30T13:05:00Z", "Citizens": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11]}}, {"model": "core.abstractlogmodel", "pk": 3, "fields": {"PublicId": "ac045782-9df6-4490-b25c-923686ccbaaf", "Created": "2025-05-22T08:30:45.110Z", "Updated": "2025-05-22T08:30:45.110Z", "Citizen": 6, "Method": "GET", "Object": "PublicService", "RecordId": "n/a", "IpAddress": "::1", "Message": "Accessd Entity: N\\A"}}, {"model": "core.abstractlogmodel", "pk": 4, "fields": {"PublicId": "22c0f976-135e-4972-ba05-3241f69d3d07", "Created": "2025-05-22T08:30:45.153Z", "Updated": "2025-05-22T08:30:45.154Z", "Citizen": 6, "Method": "GET", "Object": "PublicService", "RecordId": "n/a", "IpAddress": "::1", "Message": "Accessd Entity: N\\A"}}, {"model": "core.abstractlogmodel", "pk": 5, "fields": {"PublicId": "a707353c-dde1-4bcd-a848-c092d2bb5684", "Created": "2025-05-22T08:31:29.603Z", "Updated": "2025-05-22T08:31:29.603Z", "Citizen": 6, "Method": "GET", "Object": "ManagerLog", "RecordId": "n/a", "IpAddress": "::1", "Message": "Accessd Entity: N\\A"}}, {"model": "core.abstractlogmodel", "pk": 6, "fields": {"PublicId": "fc00897f-f139-4ecf-970b-40bd20779897", "Created": "2025-05-22T08:40:46.973Z", "Updated": "2025-05-22T08:40:46.973Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "::1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 7, "fields": {"PublicId": "b41038c1-d505-4a44-91b9-0c7bc15c83d6", "Created": "2025-05-22T08:41:41.006Z", "Updated": "2025-05-22T08:41:41.006Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "::1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 8, "fields": {"PublicId": "9a6e709d-62ef-49d1-bcde-903f5a6a2377", "Created": "2025-05-22T08:43:08.623Z", "Updated": "2025-05-22T08:43:08.623Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "::1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 9, "fields": {"PublicId": "82108c53-4958-4583-9eae-6677d4b209fc", "Created": "2025-05-22T08:43:27.723Z", "Updated": "2025-05-22T08:43:27.723Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "::1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 10, "fields": {"PublicId": "46e2dd38-8447-45a3-8416-b681f20ece8b", "Created": "2025-05-22T08:44:09.346Z", "Updated": "2025-05-22T08:44:09.346Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "::1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 11, "fields": {"PublicId": "820ca745-978a-45a9-9cc6-2845135ac21d", "Created": "2025-05-22T08:44:10.985Z", "Updated": "2025-05-22T08:44:10.985Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "::1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 12, "fields": {"PublicId": "8151d695-dcb2-4283-b7b5-0d794dd09833", "Created": "2025-05-22T08:48:31.117Z", "Updated": "2025-05-22T08:48:31.117Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "::1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 13, "fields": {"PublicId": "246fb979-d5cf-49d0-bf52-190249cf7677", "Created": "2025-05-22T08:54:33.956Z", "Updated": "2025-05-22T08:54:33.956Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "::1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 14, "fields": {"PublicId": "470ecd67-936c-4a3b-8195-330352bf148b", "Created": "2025-05-22T09:14:07.494Z", "Updated": "2025-05-22T09:14:07.494Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 15, "fields": {"PublicId": "626702e4-6e38-44e9-81e5-ea8fe3874b2c", "Created": "2025-05-22T09:14:09.906Z", "Updated": "2025-05-22T09:14:09.906Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 16, "fields": {"PublicId": "10a352ad-1551-43e5-b2a6-ca7bf2fa3dcf", "Created": "2025-05-22T09:14:09.995Z", "Updated": "2025-05-22T09:14:09.995Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 17, "fields": {"PublicId": "834190c3-06f1-44d7-8f89-e1e435c7b82d", "Created": "2025-05-22T09:14:10.034Z", "Updated": "2025-05-22T09:14:10.034Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 18, "fields": {"PublicId": "c760b6fc-7202-465f-b9ba-36bdf6f54618", "Created": "2025-05-22T09:14:10.042Z", "Updated": "2025-05-22T09:14:10.043Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 19, "fields": {"PublicId": "86f86e15-3bde-447b-862e-20ada82dea8b", "Created": "2025-05-22T09:14:10.570Z", "Updated": "2025-05-22T09:14:10.570Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 20, "fields": {"PublicId": "0d6da54b-dd03-4c92-9b4e-bba297806097", "Created": "2025-05-22T09:14:10.585Z", "Updated": "2025-05-22T09:14:10.585Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 21, "fields": {"PublicId": "817da01d-084e-4aa2-9d5f-db21bde76060", "Created": "2025-05-22T09:14:34.237Z", "Updated": "2025-05-22T09:14:34.238Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 22, "fields": {"PublicId": "dd192cf6-c175-42b3-bbd6-dffe26add1d3", "Created": "2025-05-22T09:14:35.768Z", "Updated": "2025-05-22T09:14:35.768Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 23, "fields": {"PublicId": "dc0e37bd-c28d-4d54-bd71-ffdcd91c1fd5", "Created": "2025-05-22T09:14:35.856Z", "Updated": "2025-05-22T09:14:35.856Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 24, "fields": {"PublicId": "f9033f8d-1f60-4b67-8d35-0225f3751912", "Created": "2025-05-22T09:14:36.161Z", "Updated": "2025-05-22T09:14:36.161Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 25, "fields": {"PublicId": "a3abfb38-48b9-4346-b136-dc3c8c3962fd", "Created": "2025-05-22T09:14:36.261Z", "Updated": "2025-05-22T09:14:36.261Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 26, "fields": {"PublicId": "06ceaf0b-044e-4810-a9f1-d622d0f7f8e2", "Created": "2025-05-22T09:14:36.874Z", "Updated": "2025-05-22T09:14:36.874Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 27, "fields": {"PublicId": "07bfd1b7-8c1e-47a1-b139-04f3370dd247", "Created": "2025-05-22T09:14:37.039Z", "Updated": "2025-05-22T09:14:37.039Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 28, "fields": {"PublicId": "e1ec9f9c-785c-4a3d-b473-b19078c6641a", "Created": "2025-05-22T09:14:39.206Z", "Updated": "2025-05-22T09:14:39.206Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 29, "fields": {"PublicId": "2c90fd5f-7c09-4a27-9859-9d0523ffa5c3", "Created": "2025-05-22T09:14:39.693Z", "Updated": "2025-05-22T09:14:39.693Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 30, "fields": {"PublicId": "5a3066a2-e78c-4982-ae5f-5e0f7f296f08", "Created": "2025-05-22T09:14:40.124Z", "Updated": "2025-05-22T09:14:40.124Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 31, "fields": {"PublicId": "0a8fe76d-05c2-4e13-a33e-e8673ee9a8d5", "Created": "2025-05-22T09:14:40.530Z", "Updated": "2025-05-22T09:14:40.530Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 32, "fields": {"PublicId": "64979156-3faf-487f-88ee-cd43bece65d9", "Created": "2025-05-22T09:14:41.088Z", "Updated": "2025-05-22T09:14:41.088Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 33, "fields": {"PublicId": "c73c0af9-e795-4658-818f-cf51efd0cb89", "Created": "2025-05-22T09:14:52.116Z", "Updated": "2025-05-22T09:14:52.116Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 34, "fields": {"PublicId": "1c8fcd25-c57e-4d88-9d63-43ce334ecf4a", "Created": "2025-05-22T09:14:53.853Z", "Updated": "2025-05-22T09:14:53.853Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 35, "fields": {"PublicId": "2423c91e-39ba-422a-a980-355fa6ea227d", "Created": "2025-05-22T09:14:54.075Z", "Updated": "2025-05-22T09:14:54.075Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 36, "fields": {"PublicId": "87fd6635-19c8-45d1-aec3-718421065a6a", "Created": "2025-05-22T09:14:54.283Z", "Updated": "2025-05-22T09:14:54.283Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 37, "fields": {"PublicId": "c43bfa10-6e40-4d15-adee-3f8aeb789fe8", "Created": "2025-05-22T09:14:54.395Z", "Updated": "2025-05-22T09:14:54.395Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 38, "fields": {"PublicId": "8ce15cee-ee96-40dc-8393-3f1d07133be1", "Created": "2025-05-22T09:14:54.453Z", "Updated": "2025-05-22T09:14:54.453Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 39, "fields": {"PublicId": "a3b0b092-0785-464a-87c0-37faf718eda5", "Created": "2025-05-22T09:14:55.186Z", "Updated": "2025-05-22T09:14:55.186Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 40, "fields": {"PublicId": "f00aab57-3355-441e-ae2e-7965ad4f7070", "Created": "2025-05-22T09:14:55.242Z", "Updated": "2025-05-22T09:14:55.243Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 41, "fields": {"PublicId": "ec999d42-ad4b-44fa-9a54-744db79d25ab", "Created": "2025-05-22T09:14:55.431Z", "Updated": "2025-05-22T09:14:55.431Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 42, "fields": {"PublicId": "b4807cbe-f8d1-437b-b2d9-7d9fb6ca4162", "Created": "2025-05-22T09:14:56.240Z", "Updated": "2025-05-22T09:14:56.240Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 43, "fields": {"PublicId": "f398840f-b660-4fc3-90c0-8212c9ea538d", "Created": "2025-05-22T09:14:56.758Z", "Updated": "2025-05-22T09:14:56.758Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 44, "fields": {"PublicId": "8abbcf05-49f4-4fd3-b9e0-f3dd1aeacbbd", "Created": "2025-05-22T09:14:57.236Z", "Updated": "2025-05-22T09:14:57.236Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 45, "fields": {"PublicId": "01549185-4999-44fe-a5eb-74cdb3d6f47d", "Created": "2025-05-22T09:14:57.619Z", "Updated": "2025-05-22T09:14:57.619Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 46, "fields": {"PublicId": "937ff596-db37-4876-b53c-da94b3810c53", "Created": "2025-05-22T09:14:58.018Z", "Updated": "2025-05-22T09:14:58.018Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 47, "fields": {"PublicId": "d359e66e-88be-4dea-b2fd-5e652324a750", "Created": "2025-05-22T09:14:58.454Z", "Updated": "2025-05-22T09:14:58.454Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 48, "fields": {"PublicId": "9edaffd7-facf-416b-93b2-7e10cf4a363a", "Created": "2025-05-22T09:15:15.530Z", "Updated": "2025-05-22T09:15:15.530Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 49, "fields": {"PublicId": "c0d99ae1-7e61-48e0-934d-c4d175367218", "Created": "2025-05-22T09:15:23.286Z", "Updated": "2025-05-22T09:15:23.286Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 50, "fields": {"PublicId": "91a99fa7-4f8e-4cbc-aa87-2ce67f460376", "Created": "2025-05-22T09:15:25.901Z", "Updated": "2025-05-22T09:15:25.901Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 51, "fields": {"PublicId": "b220acc1-cc3e-4676-9118-a859d28e0b02", "Created": "2025-05-22T09:15:26.179Z", "Updated": "2025-05-22T09:15:26.179Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 52, "fields": {"PublicId": "861a21de-b517-41c7-8f72-aed6f6ff5e38", "Created": "2025-05-22T09:15:26.262Z", "Updated": "2025-05-22T09:15:26.262Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 53, "fields": {"PublicId": "acea4709-2b2d-4808-95d1-ea074c787f13", "Created": "2025-05-22T09:15:26.434Z", "Updated": "2025-05-22T09:15:26.434Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 54, "fields": {"PublicId": "a29ec9f4-edca-4270-995f-e8dc0721a287", "Created": "2025-05-22T09:15:26.786Z", "Updated": "2025-05-22T09:15:26.786Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 55, "fields": {"PublicId": "0cf0022e-93d3-46ea-a26b-f1b6c36d2825", "Created": "2025-05-22T09:15:27.992Z", "Updated": "2025-05-22T09:15:27.992Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 56, "fields": {"PublicId": "e1398d0b-a73e-4b74-a208-3009f9d55ce5", "Created": "2025-05-22T09:15:29.248Z", "Updated": "2025-05-22T09:15:29.248Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 57, "fields": {"PublicId": "92b34a26-c46c-4136-8ab0-a682c26e90ef", "Created": "2025-05-22T09:15:30.186Z", "Updated": "2025-05-22T09:15:30.186Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 58, "fields": {"PublicId": "9b46b7f7-3e21-4942-b51d-f42dead43df4", "Created": "2025-05-22T09:15:31.798Z", "Updated": "2025-05-22T09:15:31.798Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 59, "fields": {"PublicId": "7b9777f7-3edd-4c4f-94c5-7519d26c0423", "Created": "2025-05-22T09:15:34.982Z", "Updated": "2025-05-22T09:15:34.982Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 60, "fields": {"PublicId": "996ea2d3-dd41-46e4-ab5f-4114a0b02841", "Created": "2025-05-22T09:15:37.614Z", "Updated": "2025-05-22T09:15:37.614Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 61, "fields": {"PublicId": "c7398ddb-4e6e-401f-a15c-49800460c8e6", "Created": "2025-05-22T09:15:41.643Z", "Updated": "2025-05-22T09:15:41.643Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 62, "fields": {"PublicId": "8c09f085-5235-4efc-bb65-4d7e61a621c2", "Created": "2025-05-22T09:16:06.692Z", "Updated": "2025-05-22T09:16:06.692Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 63, "fields": {"PublicId": "e9e13279-3026-4682-ba03-ba1a290302fa", "Created": "2025-05-22T09:16:09.000Z", "Updated": "2025-05-22T09:16:09.000Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 64, "fields": {"PublicId": "11369b3d-549b-460a-b30e-fa05c3f8ceab", "Created": "2025-05-22T09:16:09.050Z", "Updated": "2025-05-22T09:16:09.050Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 65, "fields": {"PublicId": "27cdb353-ee79-40ae-99de-5b2b39a311bd", "Created": "2025-05-22T09:16:09.131Z", "Updated": "2025-05-22T09:16:09.131Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 66, "fields": {"PublicId": "24f85b9a-2abd-446e-bfbb-692dffcd4e29", "Created": "2025-05-22T09:16:09.358Z", "Updated": "2025-05-22T09:16:09.358Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 67, "fields": {"PublicId": "47e6acc3-fa78-4b79-9197-b14b45f28b76", "Created": "2025-05-22T09:16:09.450Z", "Updated": "2025-05-22T09:16:09.450Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 68, "fields": {"PublicId": "5a77c34a-f62b-4fba-b39e-2fd925ac926a", "Created": "2025-05-22T09:16:10.533Z", "Updated": "2025-05-22T09:16:10.533Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 69, "fields": {"PublicId": "d8cc2f8e-b025-4477-a4f0-31543109322a", "Created": "2025-05-22T09:16:11.056Z", "Updated": "2025-05-22T09:16:11.056Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 70, "fields": {"PublicId": "cb1e4e01-1cb5-441f-b575-eefd69091973", "Created": "2025-05-22T09:16:11.549Z", "Updated": "2025-05-22T09:16:11.549Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 71, "fields": {"PublicId": "68d080f4-bf46-4801-9aeb-ff1b2a27e6ed", "Created": "2025-05-22T09:16:12.040Z", "Updated": "2025-05-22T09:16:12.040Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 72, "fields": {"PublicId": "e2341e8b-fdb4-4a39-b4cb-b1654cae86d8", "Created": "2025-05-22T09:16:12.579Z", "Updated": "2025-05-22T09:16:12.579Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 73, "fields": {"PublicId": "2d8cb0eb-656e-4168-8569-10028f4c92f3", "Created": "2025-05-22T09:16:19.996Z", "Updated": "2025-05-22T09:16:19.996Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 74, "fields": {"PublicId": "34b7a8de-15cd-41c9-99d3-68cca926c6be", "Created": "2025-05-22T09:16:21.668Z", "Updated": "2025-05-22T09:16:21.668Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 75, "fields": {"PublicId": "c4296526-cd32-4fa7-8bbb-a9de3ff737dc", "Created": "2025-05-22T09:16:21.838Z", "Updated": "2025-05-22T09:16:21.838Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 76, "fields": {"PublicId": "f8f135f1-7eb2-465a-bbf5-d071f3525d25", "Created": "2025-05-22T09:16:22.550Z", "Updated": "2025-05-22T09:16:22.550Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 77, "fields": {"PublicId": "d279b0ff-0de2-4d34-9fa1-615c50ab7c75", "Created": "2025-05-22T09:16:22.936Z", "Updated": "2025-05-22T09:16:22.936Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 78, "fields": {"PublicId": "3276ae14-6403-4e60-bd7a-208385714b5a", "Created": "2025-05-22T09:16:23.300Z", "Updated": "2025-05-22T09:16:23.300Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 79, "fields": {"PublicId": "52798c04-b2a8-4dcb-8159-21f0e603e320", "Created": "2025-05-22T09:16:23.913Z", "Updated": "2025-05-22T09:16:23.913Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 80, "fields": {"PublicId": "afc09545-9ecb-4720-a2cf-462733c406c8", "Created": "2025-05-22T09:16:24.426Z", "Updated": "2025-05-22T09:16:24.426Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 81, "fields": {"PublicId": "8c3c8378-8f98-4f29-9874-cc2cdde8efcc", "Created": "2025-05-22T09:55:30.442Z", "Updated": "2025-05-22T09:55:30.442Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 82, "fields": {"PublicId": "88bd2a86-750d-4c90-a0e2-c376e53fa659", "Created": "2025-05-22T10:23:13.747Z", "Updated": "2025-05-22T10:23:13.747Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 83, "fields": {"PublicId": "101f7d36-8339-484d-acb3-f89b321ff64a", "Created": "2025-05-22T10:23:15.514Z", "Updated": "2025-05-22T10:23:15.514Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 84, "fields": {"PublicId": "a36573bf-71c6-48af-8419-6b5449c28f1d", "Created": "2025-05-22T10:23:15.524Z", "Updated": "2025-05-22T10:23:15.524Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 85, "fields": {"PublicId": "c606334a-cd94-4a6f-82ce-9dba746974ac", "Created": "2025-05-22T10:23:16.379Z", "Updated": "2025-05-22T10:23:16.379Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 86, "fields": {"PublicId": "cb381721-3aec-4f00-ae07-9a30f3a904ee", "Created": "2025-05-22T10:23:17.110Z", "Updated": "2025-05-22T10:23:17.110Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 87, "fields": {"PublicId": "7086fae5-a5dd-4606-9d9f-b45b00389d85", "Created": "2025-05-22T10:23:18.149Z", "Updated": "2025-05-22T10:23:18.149Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 88, "fields": {"PublicId": "72d4fcf7-4251-49c9-9a80-296fbd03249a", "Created": "2025-05-22T10:23:18.765Z", "Updated": "2025-05-22T10:23:18.765Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 89, "fields": {"PublicId": "02cd03c6-14fc-4704-a50b-bafd569c302f", "Created": "2025-05-22T10:23:19.293Z", "Updated": "2025-05-22T10:23:19.293Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 90, "fields": {"PublicId": "6e25df54-1bca-4f56-9888-2a781a6b8d59", "Created": "2025-05-22T10:23:36.368Z", "Updated": "2025-05-22T10:23:36.368Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 91, "fields": {"PublicId": "2e18c06b-e2ac-4b6f-bda6-a3dce10df567", "Created": "2025-05-22T10:23:37.917Z", "Updated": "2025-05-22T10:23:37.917Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 92, "fields": {"PublicId": "a69feadd-8858-46af-88f3-6fdf52b053a1", "Created": "2025-05-22T10:23:38.007Z", "Updated": "2025-05-22T10:23:38.007Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 93, "fields": {"PublicId": "8c9e7f63-8ee7-495e-a69a-0434f6a2051b", "Created": "2025-05-22T10:23:38.933Z", "Updated": "2025-05-22T10:23:38.933Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 94, "fields": {"PublicId": "46005b0c-4c74-4720-9b96-e733bc2446f6", "Created": "2025-05-22T10:23:39.463Z", "Updated": "2025-05-22T10:23:39.463Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 95, "fields": {"PublicId": "b8bf645b-c7d0-4ed2-b6c6-c80400940a00", "Created": "2025-05-22T10:23:40.028Z", "Updated": "2025-05-22T10:23:40.028Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 96, "fields": {"PublicId": "5d46d159-8e66-4c12-9e63-0ce411361a57", "Created": "2025-05-22T10:23:40.530Z", "Updated": "2025-05-22T10:23:40.530Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 97, "fields": {"PublicId": "812d2257-3bb0-4d68-8fa5-6b205d4c54da", "Created": "2025-05-22T10:23:41.096Z", "Updated": "2025-05-22T10:23:41.096Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 98, "fields": {"PublicId": "06b1d651-a987-466a-b9af-e62a25c2571b", "Created": "2025-05-22T10:24:21.068Z", "Updated": "2025-05-22T10:24:21.068Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 99, "fields": {"PublicId": "5b91026d-ce86-4a3d-b5f4-f560d5e1e9a9", "Created": "2025-05-22T10:24:23.018Z", "Updated": "2025-05-22T10:24:23.018Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 100, "fields": {"PublicId": "2757f237-9ce9-4c74-a8c8-eb94c13a884d", "Created": "2025-05-22T10:24:23.336Z", "Updated": "2025-05-22T10:24:23.336Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 101, "fields": {"PublicId": "c81d5ea4-69bc-4adb-8c6b-26d0522f5b42", "Created": "2025-05-22T10:24:23.480Z", "Updated": "2025-05-22T10:24:23.480Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 102, "fields": {"PublicId": "8a2b25b5-1dc4-4498-ad1d-066c1dbe7eba", "Created": "2025-05-22T10:24:23.598Z", "Updated": "2025-05-22T10:24:23.598Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 103, "fields": {"PublicId": "bde42333-6602-4c99-81cc-e7060213b55c", "Created": "2025-05-22T10:24:23.706Z", "Updated": "2025-05-22T10:24:23.706Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 104, "fields": {"PublicId": "c322a9fd-c85c-431c-8a81-b25ac628a396", "Created": "2025-05-22T10:24:24.818Z", "Updated": "2025-05-22T10:24:24.818Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 105, "fields": {"PublicId": "bd48974c-b6ee-4398-aa4b-525f329cd9f2", "Created": "2025-05-22T10:24:25.467Z", "Updated": "2025-05-22T10:24:25.467Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 106, "fields": {"PublicId": "8afc2a01-7d44-4f9c-8702-181ab2b80664", "Created": "2025-05-22T10:24:26.040Z", "Updated": "2025-05-22T10:24:26.040Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 107, "fields": {"PublicId": "99b7726b-8b1f-45b3-8791-a67e3ccd030b", "Created": "2025-05-22T10:24:26.605Z", "Updated": "2025-05-22T10:24:26.605Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 108, "fields": {"PublicId": "c4924624-079a-4f9d-9e2b-1bedf432fc92", "Created": "2025-05-22T10:24:27.135Z", "Updated": "2025-05-22T10:24:27.135Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 109, "fields": {"PublicId": "20aeb862-bdcf-4079-a1f0-fbd1d59b6c12", "Created": "2025-05-22T10:49:08.451Z", "Updated": "2025-05-22T10:49:08.451Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 110, "fields": {"PublicId": "926f684b-0616-41cf-813c-5567cdcade73", "Created": "2025-05-22T10:49:11.082Z", "Updated": "2025-05-22T10:49:11.082Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 111, "fields": {"PublicId": "a9583b68-9837-4b54-89cf-d0c97957e572", "Created": "2025-05-22T10:49:11.200Z", "Updated": "2025-05-22T10:49:11.200Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 112, "fields": {"PublicId": "1bf41a85-a967-470e-8ff2-e7240c4df3ac", "Created": "2025-05-22T10:49:11.211Z", "Updated": "2025-05-22T10:49:11.211Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 113, "fields": {"PublicId": "10e3c459-5d2f-494c-ad29-c92fe358e936", "Created": "2025-05-22T10:49:11.407Z", "Updated": "2025-05-22T10:49:11.407Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 114, "fields": {"PublicId": "f4ebae1d-6580-4a25-bff1-5fa421d79185", "Created": "2025-05-22T10:49:11.409Z", "Updated": "2025-05-22T10:49:11.409Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 115, "fields": {"PublicId": "8be58ea8-6234-44d4-aa84-cd833ea62b92", "Created": "2025-05-22T10:49:12.277Z", "Updated": "2025-05-22T10:49:12.277Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 116, "fields": {"PublicId": "f4fc7b06-763c-4b77-a6b0-23a91fb38f93", "Created": "2025-05-22T10:49:13.127Z", "Updated": "2025-05-22T10:49:13.127Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 117, "fields": {"PublicId": "a00c9d34-8164-427f-99ac-d1aed6bdc2c8", "Created": "2025-05-22T10:49:13.621Z", "Updated": "2025-05-22T10:49:13.621Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 118, "fields": {"PublicId": "9daaec28-36d6-46ea-9610-531658157345", "Created": "2025-05-22T10:49:14.293Z", "Updated": "2025-05-22T10:49:14.293Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 119, "fields": {"PublicId": "e93492d9-c97b-4997-9593-3dd1b6c22fc4", "Created": "2025-05-22T10:49:14.815Z", "Updated": "2025-05-22T10:49:14.815Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 120, "fields": {"PublicId": "8a8414a3-3356-4cf6-8dc5-49dc20573f08", "Created": "2025-05-22T11:01:27.836Z", "Updated": "2025-05-22T11:01:27.836Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 121, "fields": {"PublicId": "c082c8a9-4a1c-4bbb-ad30-308f6e8ccd06", "Created": "2025-05-22T11:01:30.146Z", "Updated": "2025-05-22T11:01:30.146Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 122, "fields": {"PublicId": "1847566b-1deb-4252-861a-6e6573b4f418", "Created": "2025-05-22T11:01:30.273Z", "Updated": "2025-05-22T11:01:30.273Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 123, "fields": {"PublicId": "0af6cede-03f9-4962-85da-7410bb37769a", "Created": "2025-05-22T11:01:30.734Z", "Updated": "2025-05-22T11:01:30.734Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 124, "fields": {"PublicId": "95d048b0-4a23-4955-8722-ef23dd350bb3", "Created": "2025-05-22T11:01:31.061Z", "Updated": "2025-05-22T11:01:31.061Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 125, "fields": {"PublicId": "0d317907-73b1-4f79-9b87-0bf36645e0af", "Created": "2025-05-22T11:01:31.230Z", "Updated": "2025-05-22T11:01:31.230Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 126, "fields": {"PublicId": "9fc41e8e-7567-4f91-93d3-b06c70db1a2b", "Created": "2025-05-22T11:01:32.324Z", "Updated": "2025-05-22T11:01:32.324Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 127, "fields": {"PublicId": "26c6b0c6-a19a-46d2-ae17-191b602e8e95", "Created": "2025-05-22T11:01:33.343Z", "Updated": "2025-05-22T11:01:33.343Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 128, "fields": {"PublicId": "7202adac-58cd-42b9-97ad-5c1586773a9d", "Created": "2025-05-22T11:01:34.058Z", "Updated": "2025-05-22T11:01:34.058Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 129, "fields": {"PublicId": "96b7614a-e717-4969-b3a7-12e9e0a64224", "Created": "2025-05-22T11:01:34.637Z", "Updated": "2025-05-22T11:01:34.637Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 130, "fields": {"PublicId": "723e0443-4e3b-4942-914e-7419b2e0fd6c", "Created": "2025-05-22T11:01:35.608Z", "Updated": "2025-05-22T11:01:35.608Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 131, "fields": {"PublicId": "45778854-325b-4b8d-9c41-ba24c8421b8b", "Created": "2025-05-22T11:24:06.159Z", "Updated": "2025-05-22T11:24:06.159Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 132, "fields": {"PublicId": "9ff78377-2579-4d7a-9e8f-a288ff17ff92", "Created": "2025-05-22T11:24:10.710Z", "Updated": "2025-05-22T11:24:10.710Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 133, "fields": {"PublicId": "f643f67c-2324-4553-bb24-afb2e144fbab", "Created": "2025-05-22T11:24:10.753Z", "Updated": "2025-05-22T11:24:10.753Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 134, "fields": {"PublicId": "27467981-1980-4179-825f-fdffb0f41dbc", "Created": "2025-05-22T11:24:10.835Z", "Updated": "2025-05-22T11:24:10.835Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 135, "fields": {"PublicId": "023355f7-1792-4f41-a9c4-8de5a2c69435", "Created": "2025-05-22T11:24:11.026Z", "Updated": "2025-05-22T11:24:11.026Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 136, "fields": {"PublicId": "d6b8fb33-533b-4fd3-b6c0-67d2a2779a43", "Created": "2025-05-22T11:24:11.293Z", "Updated": "2025-05-22T11:24:11.294Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 137, "fields": {"PublicId": "8a816768-5de2-49d6-bfa4-69c59d920cbc", "Created": "2025-05-22T11:24:13.146Z", "Updated": "2025-05-22T11:24:13.146Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 138, "fields": {"PublicId": "2f433d88-5858-4429-b10b-ceb10719ffdc", "Created": "2025-05-22T11:24:13.853Z", "Updated": "2025-05-22T11:24:13.853Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 139, "fields": {"PublicId": "65be879d-63a5-4820-92e2-23afd4ada720", "Created": "2025-05-22T11:24:14.551Z", "Updated": "2025-05-22T11:24:14.551Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 140, "fields": {"PublicId": "43e1bfee-05e1-4e9d-87a5-91dd9dabb3ae", "Created": "2025-05-22T11:24:15.545Z", "Updated": "2025-05-22T11:24:15.545Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 141, "fields": {"PublicId": "9a0f876a-bd46-4368-ae9d-9d4632ad7877", "Created": "2025-05-22T11:24:16.418Z", "Updated": "2025-05-22T11:24:16.418Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 142, "fields": {"PublicId": "20c2b322-e1b9-4c98-9ff6-0768c45c1621", "Created": "2025-05-22T12:35:55.387Z", "Updated": "2025-05-22T12:35:55.387Z", "Citizen": 6, "Method": "GET", "Object": "PublicService", "RecordId": "n/a", "IpAddress": "127.0.0.1", "Message": "Accessd Entity: N\\A"}}, {"model": "core.abstractlogmodel", "pk": 143, "fields": {"PublicId": "7dfb980c-0e90-45c4-a9b4-61d43484d46d", "Created": "2025-05-22T12:35:55.426Z", "Updated": "2025-05-22T12:35:55.426Z", "Citizen": 6, "Method": "GET", "Object": "PublicService", "RecordId": "n/a", "IpAddress": "127.0.0.1", "Message": "Accessd Entity: N\\A"}}, {"model": "core.abstractlogmodel", "pk": 144, "fields": {"PublicId": "ce78293c-9ddf-4ad0-8520-f5e2045d9ce4", "Created": "2025-05-22T12:36:26.369Z", "Updated": "2025-05-22T12:36:26.369Z", "Citizen": 6, "Method": "GET", "Object": "PublicService", "RecordId": "n/a", "IpAddress": "127.0.0.1", "Message": "Accessd Entity: N\\A"}}, {"model": "core.abstractlogmodel", "pk": 145, "fields": {"PublicId": "0ca59654-ac9a-453f-aa02-1800baa46f8f", "Created": "2025-05-22T12:36:26.386Z", "Updated": "2025-05-22T12:36:26.386Z", "Citizen": 6, "Method": "GET", "Object": "PublicService", "RecordId": "n/a", "IpAddress": "127.0.0.1", "Message": "Accessd Entity: N\\A"}}, {"model": "core.abstractlogmodel", "pk": 146, "fields": {"PublicId": "2baae6e2-ae1c-4a21-b717-615666a7214e", "Created": "2025-05-22T12:36:36.872Z", "Updated": "2025-05-22T12:36:36.872Z", "Citizen": 6, "Method": "GET", "Object": "PublicService", "RecordId": "n/a", "IpAddress": "127.0.0.1", "Message": "Accessd Entity: N\\A"}}, {"model": "core.abstractlogmodel", "pk": 147, "fields": {"PublicId": "9afba41b-55ff-4e15-be79-8bc685f90530", "Created": "2025-05-22T12:36:36.888Z", "Updated": "2025-05-22T12:36:36.888Z", "Citizen": 6, "Method": "GET", "Object": "PublicService", "RecordId": "n/a", "IpAddress": "127.0.0.1", "Message": "Accessd Entity: N\\A"}}, {"model": "core.abstractlogmodel", "pk": 148, "fields": {"PublicId": "54aef4e8-2ec6-4af3-81cc-2d63050e7ec0", "Created": "2025-05-22T12:36:50.903Z", "Updated": "2025-05-22T12:36:50.903Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 149, "fields": {"PublicId": "977d047c-6385-432e-a0f2-37a86c6929a0", "Created": "2025-05-22T12:36:53.301Z", "Updated": "2025-05-22T12:36:53.301Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 150, "fields": {"PublicId": "5f4d4a50-274e-48a3-802c-c0920997fa3f", "Created": "2025-05-22T12:36:53.971Z", "Updated": "2025-05-22T12:36:53.971Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 151, "fields": {"PublicId": "3bbd4e76-b9f1-45da-b61d-cc0c98d3c247", "Created": "2025-05-22T12:36:54.220Z", "Updated": "2025-05-22T12:36:54.220Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 152, "fields": {"PublicId": "b318bb1a-3e30-471a-8653-1228ef30026f", "Created": "2025-05-22T12:36:54.357Z", "Updated": "2025-05-22T12:36:54.357Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 153, "fields": {"PublicId": "43ed66fe-fed8-40d6-9ce6-b6d8fa0decaf", "Created": "2025-05-22T12:36:54.379Z", "Updated": "2025-05-22T12:36:54.379Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 154, "fields": {"PublicId": "c1c448f8-3d4c-4ef6-9a68-8d6015519b3c", "Created": "2025-05-22T12:36:55.353Z", "Updated": "2025-05-22T12:36:55.353Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 155, "fields": {"PublicId": "8864856e-29ec-43d0-bf78-72c40c222ad5", "Created": "2025-05-22T12:36:56.181Z", "Updated": "2025-05-22T12:36:56.181Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 156, "fields": {"PublicId": "4e5cedbb-5dcb-459d-b8b6-dcfbab5b6075", "Created": "2025-05-22T12:36:56.827Z", "Updated": "2025-05-22T12:36:56.827Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 157, "fields": {"PublicId": "0235eaa4-0c89-435d-a213-80bd39800621", "Created": "2025-05-22T12:36:57.416Z", "Updated": "2025-05-22T12:36:57.416Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "core.abstractlogmodel", "pk": 158, "fields": {"PublicId": "5de6a12f-e363-4a6f-b02e-b12b44f6d958", "Created": "2025-05-22T12:36:58.008Z", "Updated": "2025-05-22T12:36:58.008Z", "Citizen": 10, "Method": "GET", "Object": "Service", "RecordId": "98eaa46819a54960929ae448cfc28783", "IpAddress": "127.0.0.1", "Message": "Accessed Service: uz_service1"}}, {"model": "citizen.citizen", "pk": 1, "fields": {"password": "pbkdf2_sha256$870000$mr1xnKpUYlfMzVV1CKVbmJ$+BE9+tijX+v8QgTIVYiuUjmq/XpQc07Ua/IX4W2hMaM=", "last_login": null, "PublicId": "b6cc09c7-d53f-4b18-902b-68e6a1d4cb9a", "UserName": "user1", "FirstName": "Test First Name 1", "SecondName": "testSecondName", "Surname": "testSurname", "NationalId": "4948585kdsfjsfs", "DOB": "2025-01-20T13:39:16.959Z", "Email": "testEmail1@gmail.com", "EmailVerified": false, "is_active": true, "is_superuser": false, "Created": "2025-01-20T11:41:59.563Z", "Updated": "2025-01-20T14:23:13.847Z", "groups": [], "user_permissions": []}}, {"model": "citizen.citizen", "pk": 2, "fields": {"password": "hellomanu", "last_login": null, "PublicId": "8bec7df2-7af4-4b8f-84ef-8806aef4ca51", "UserName": "user2", "FirstName": "Test First Name 1", "SecondName": "testSecondNameFix", "Surname": "testSurname", "NationalId": "4948585kdsdjdj", "DOB": "2025-01-20T13:39:16.959Z", "Email": "testEmail2@gmail.com", "EmailVerified": false, "is_active": true, "is_superuser": false, "Created": "2025-01-20T14:24:56.066Z", "Updated": "2025-02-02T09:18:05.244Z", "groups": [], "user_permissions": []}}, {"model": "citizen.citizen", "pk": 4, "fields": {"password": "hellomanu", "last_login": null, "PublicId": "066738e5-84dc-4a66-b36f-a8254a51633c", "UserName": "user3", "FirstName": "Test First Name 1", "SecondName": "testSecondName", "Surname": "testSurname", "NationalId": "4948585kdsdjdj", "DOB": "2025-01-20T13:39:16.959Z", "Email": "testEmail3@gmail.com", "EmailVerified": false, "is_active": true, "is_superuser": false, "Created": "2025-01-20T14:34:25.282Z", "Updated": "2025-01-20T14:34:25.282Z", "groups": [], "user_permissions": []}}, {"model": "citizen.citizen", "pk": 5, "fields": {"password": "pbkdf2_sha256$870000$29XnsmiLfzyS8l7wTgnhrs$2lK0QXP0eQOJzZz6HTth2c35KF5fvAa1oSd6cxep2EE=", "last_login": null, "PublicId": "58d915d3-3357-4ae4-bd52-9b849def20ee", "UserName": "user4", "FirstName": "Test First 4", "SecondName": "testSecondName", "Surname": "testSurname", "NationalId": "4948585kdj", "DOB": "2025-01-20T13:39:16.959Z", "Email": "testEmail4@gmail.com", "EmailVerified": false, "is_active": true, "is_superuser": false, "Created": "2025-01-21T09:24:17.358Z", "Updated": "2025-02-02T08:48:53.334Z", "groups": [], "user_permissions": []}}, {"model": "citizen.citizen", "pk": 6, "fields": {"password": "pbkdf2_sha256$870000$Ao1mFzCjiVsycUgfteD8Iu$i3LBlKs8CB6LWCA95v40qH0WBLoBJiPuX7PX0im2Omw=", "last_login": null, "PublicId": "a75b1818-d7af-4cc0-8324-2d2b3bd62c68", "UserName": "erlson", "FirstName": "Erlson", "SecondName": "Tadiwa", "Surname": "Madara", "NationalId": "4948585kd", "DOB": "2001-09-18T13:39:16.959Z", "Email": "erlsontmadara@gmail.com", "EmailVerified": false, "is_active": true, "is_superuser": false, "Created": "2025-01-27T10:04:26.628Z", "Updated": "2025-01-27T10:04:26.628Z", "groups": [], "user_permissions": []}}, {"model": "citizen.citizen", "pk": 7, "fields": {"password": "pbkdf2_sha256$870000$u0544k4tnRoWLJFeHPsM7n$4xsYVcGApJeorFhmcMqBvFehyFaB5IWCnE0XEuNunsg=", "last_login": null, "PublicId": "2540e0e2-1337-44fc-b5f3-ddf2f7d14639", "UserName": "user5", "FirstName": "user5", "SecondName": null, "Surname": "surname5", "NationalId": "8484jsjsjdf", "DOB": "2012-01-20T13:39:16Z", "Email": "user5@email.gmail.com", "EmailVerified": false, "is_active": true, "is_superuser": false, "Created": "2025-02-03T12:36:38.310Z", "Updated": "2025-02-03T12:36:38.310Z", "groups": [], "user_permissions": []}}, {"model": "citizen.citizen", "pk": 8, "fields": {"password": "pbkdf2_sha256$870000$58v30jL81RTXBiCMXnmDg0$vmpolgICXf5nEI1Acne0wEpBmojMJX5pgWhUQbo2YhI=", "last_login": null, "PublicId": "fd8605ef-f2c1-48f1-8042-f191c7ab921c", "UserName": "user7", "FirstName": "user7", "SecondName": null, "Surname": "surname7", "NationalId": "848jsjdf", "DOB": "2012-01-20T13:39:16Z", "Email": "user7@email.gmail.com", "EmailVerified": false, "is_active": true, "is_superuser": false, "Created": "2025-03-03T10:14:21.806Z", "Updated": "2025-03-03T10:14:21.806Z", "groups": [], "user_permissions": []}}, {"model": "citizen.citizen", "pk": 9, "fields": {"password": "pbkdf2_sha256$870000$jQDcDAiR8BFXpfeXGRq2d9$ZyOLwrxUOQavfLTTiBEVrYwQlgzI3ZSlUlkWTJsZzvU=", "last_login": null, "PublicId": "0ee6df67-b8d8-4f8b-8298-253f212664ed", "UserName": "user8", "FirstName": "user8", "SecondName": null, "Surname": "surname8", "NationalId": "848jsdf", "DOB": "2012-01-20T13:39:16Z", "Email": "user8@email.gmail.com", "EmailVerified": false, "is_active": true, "is_superuser": false, "Created": "2025-03-03T10:14:44.250Z", "Updated": "2025-03-03T10:14:44.250Z", "groups": [], "user_permissions": []}}, {"model": "citizen.citizen", "pk": 10, "fields": {"password": "pbkdf2_sha256$870000$Za33lQsMBS2V0DFLfF9hnP$7+BDvjIgfb4WWtT8JP/O7Ob1bI2DZLBGWeWjlHYWAvo=", "last_login": null, "PublicId": "0f975b51-060a-4020-a3f4-f7c781d3faad", "UserName": "user99", "FirstName": "user99", "SecondName": null, "Surname": "surname9", "NationalId": "848jsdf9ppppp", "DOB": "2012-01-20T13:39:16Z", "Email": "user9@email.com", "EmailVerified": false, "is_active": true, "is_superuser": false, "Created": "2025-03-28T08:36:29.702Z", "Updated": "2025-04-30T12:24:46.051Z", "groups": [], "user_permissions": []}}, {"model": "citizen.citizen", "pk": 11, "fields": {"password": "pbkdf2_sha256$870000$FAp0wNugmZ3ebZZSCoeQxc$HBNphVLIEHV2zR4hUjR2F72DSEMimhIdLI23u/C16EQ=", "last_login": null, "PublicId": "88406c4b-e60b-499e-9a80-b9d2ede1d562", "UserName": "UITestIsername", "FirstName": "Ui Test", "SecondName": null, "Surname": "UiTest", "NationalId": "UitestId", "DOB": "2004-06-30T00:00:00Z", "Email": "uitest@gmail.com", "EmailVerified": false, "is_active": true, "is_superuser": false, "Created": "2025-03-29T07:25:04.400Z", "Updated": "2025-03-29T07:25:04.400Z", "groups": [], "user_permissions": []}}, {"model": "siteManager.sitemanager", "pk": 3, "fields": {"password": "pbkdf2_sha256$870000$6OAYQvqzOJdedapsKSeNI4$/9luyV8ctkNdDYjaafSJON47KdLEqIcJxanCHI8oLA4=", "last_login": null, "PublicId": "8e2a331c-d63c-43fc-98e0-751e02cafa25", "Created": "2025-01-27T10:20:39.503Z", "Updated": "2025-01-27T10:20:39.503Z", "ManagerUserName": "A3R0", "Citizen": 6, "FirstEmail": "erlsontmadara@gmail.com", "SecondEmail": null}}, {"model": "administrator.administrator", "pk": 1, "fields": {"password": "pbkdf2_sha256$870000$x9OECY0Gp04lBwMtHjeNAe$3TDPdy6TDjm25sVCmKh4tDJ2VLGQBUVej8j0ZKk+Azs=", "last_login": null, "PublicId": "302db681-46b2-4ca7-ba2a-121ef53ee10a", "Created": "2025-01-29T13:07:15.877Z", "Updated": "2025-01-29T13:07:15.877Z", "AdministratorUserName": "A3R0", "Citizen": 1, "FirstEmail": "admin1@gmail.com", "SecondEmail": null, "GranteeLimit": 30}}, {"model": "administrator.administrator", "pk": 2, "fields": {"password": "pbkdf2_sha256$870000$GjU9MEZ02wRCGrvQinnqIB$PZIdUpi+uj3sjpzXZBmtY3lmCE3Vu1U3gDR3HXDsfKc=", "last_login": null, "PublicId": "dd5f04e8-efac-4ae3-b079-fe6946a29cd5", "Created": "2025-02-03T12:44:21.887Z", "Updated": "2025-02-03T12:44:21.887Z", "AdministratorUserName": "AdminiDeptest", "Citizen": 7, "FirstEmail": "adminiDeptest@gmail.com", "SecondEmail": null, "GranteeLimit": 30}}, {"model": "administrator.administrator", "pk": 3, "fields": {"password": "pbkdf2_sha256$870000$D99oPza1RSzK5AhecBdoNZ$X7j11XKqPOkVbAkLEJOuVcFWM58dZ+bdyH96+270oVw=", "last_login": null, "PublicId": "f912492d-f6f5-4064-893b-c9cee0f8badf", "Created": "2025-04-02T19:49:46.303Z", "Updated": "2025-04-02T19:49:46.303Z", "AdministratorUserName": "ANewAdmin", "Citizen": 9, "FirstEmail": "newAdmin@admin.com", "SecondEmail": "newAdmin@admin.com", "GranteeLimit": 20}}, {"model": "grantee.grantee", "pk": 1, "fields": {"password": "pbkdf2_sha256$870000$DBLdCa0O2GmFLaS1dXIJwf$VondvyAsqB3YTHv0agTdB/bDXr4lbZASsqXLqTaG0z8=", "last_login": null, "PublicId": "6b605828-5c0a-4b59-9849-e67e2a90feb8", "Created": "2025-01-31T14:11:12.019Z", "Updated": "2025-02-02T08:48:25.359Z", "GranteeUserName": "grantee1", "Citizen": 5, "Administrator": 1, "Association": 2, "FirstEmail": "grantee1@gmail.com", "SecondEmail": null}}, {"model": "grantee.grantee", "pk": 2, "fields": {"password": "pbkdf2_sha256$870000$nXKVsLjDipeiouPc6x7hA3$pSReGOuty3HE7bQ1nGAhwL61fGRzvUzlvJ9zLl0pBKg=", "last_login": null, "PublicId": "1c3c9760-d07a-4367-a30e-6a956a88ade0", "Created": "2025-04-02T14:21:15.991Z", "Updated": "2025-04-02T14:21:15.991Z", "GranteeUserName": "grantee22", "Citizen": 11, "Administrator": 1, "Association": 4, "FirstEmail": "grantee2@email.com", "SecondEmail": null}}, {"model": "grantee.grantee", "pk": 3, "fields": {"password": "pbkdf2_sha256$870000$WOHi1Ixy36j2xMMCAmEiCK$pw5W7H3libANyvJrvsCc6iHY5x5irEfUNuHQl1zfEi4=", "last_login": null, "PublicId": "ad09ad1f-6b6a-43da-9f62-8d91358a0596", "Created": "2025-04-03T06:45:50.205Z", "Updated": "2025-04-03T06:45:50.205Z", "GranteeUserName": "UzGrantee", "Citizen": 10, "Administrator": 3, "Association": 6, "FirstEmail": "grantee3@email.com", "SecondEmail": "grantee3@email.com"}}, {"model": "grantee.grantee", "pk": 4, "fields": {"password": "pbkdf2_sha256$870000$oZe49ULiBcaDKVf1YPVuue$qi8jvOqiCWGc+YG943ukf5m5bzgo8pAxh8BuJrwqa9U=", "last_login": null, "PublicId": "f709b2f5-5d21-4aed-b67f-f95bbaa830ec", "Created": "2025-04-03T09:10:34.632Z", "Updated": "2025-04-03T09:10:34.632Z", "GranteeUserName": "grantee44", "Citizen": 6, "Administrator": 1, "Association": 5, "FirstEmail": "grantee4@gmail.com", "SecondEmail": "grantee4@gmail.com"}}, {"model": "grantee.grantee", "pk": 5, "fields": {"password": "pbkdf2_sha256$870000$RduhxYAhz5HCopVHZE7JLf$A7biwSJ4ZjXoznxOPg6ZEUEplHPezSz7arblN1HbYyE=", "last_login": null, "PublicId": "0b530e92-b3aa-4972-9c06-94212af368c0", "Created": "2025-04-03T09:37:11.621Z", "Updated": "2025-04-03T09:37:11.621Z", "GranteeUserName": "grantee55", "Citizen": 7, "Administrator": 1, "Association": 7, "FirstEmail": "grantee55@gmail.com", "SecondEmail": "grantee55@gmail.com"}}, {"model": "department.department", "pk": 1, "fields": {"PublicId": "fc688c8e-c47d-4ce5-9591-fab592628666", "Created": "2025-02-03T12:44:21.989Z", "Updated": "2025-04-04T08:23:48.498Z", "Title": "Test Depart", "Administrator": 2, "Description": "for testing purposes", "Email": "department1@gmail.com", "Telephone": "07782899090", "Website": "https://chatgpt.com/c/679f9248-6eb0-8003-8e53-6fee13fd4892"}}, {"model": "department.department", "pk": 16, "fields": {"PublicId": "9bd7083b-637a-4028-91e7-4971883c3170", "Created": "2025-02-03T13:30:16.868Z", "Updated": "2025-04-02T09:52:24.876Z", "Title": "department ui", "Administrator": 1, "Description": "for testing purposes 2", "Email": "department2025@gmail.com", "Telephone": "07782827400", "Website": "https://www.internetdownloadmanager.com/download2.html"}}, {"model": "department.department", "pk": 17, "fields": {"PublicId": "9cb357d9-ccd9-4d2a-abe9-391ff8e3fda7", "Created": "2025-04-03T06:24:03.042Z", "Updated": "2025-04-03T06:24:03.042Z", "Title": "Ministry of uz", "Administrator": 3, "Description": "uz stuff", "Email": "uz@their.email.com", "Telephone": "07782827", "Website": "https://emhare.uz.ac.zw/Users/login"}}, {"model": "association.association", "pk": 1, "fields": {"PublicId": "95498a7d-c33e-4593-8e6d-4767c1447a9a", "Created": "2025-02-03T13:30:16.893Z", "Updated": "2025-04-02T09:53:46.936Z", "Title": "association190", "Email": "association1@gmail.com", "Department": 16, "Description": "association1 description", "Website": "https://www.internetdownloadmanager.com/download2.html"}}, {"model": "association.association", "pk": 2, "fields": {"PublicId": "b7026842-9649-4957-af28-8eebbc036d37", "Created": "2025-02-03T13:39:16.388Z", "Updated": "2025-02-03T13:39:16.388Z", "Title": "association2", "Email": "association2@gmail.com", "Department": 16, "Description": "association2 description", "Website": "https://www.internetdownloadmanager.com/download2.html"}}, {"model": "association.association", "pk": 3, "fields": {"PublicId": "87f6bc7d-ce27-4314-812f-ac00d32f60c4", "Created": "2025-04-02T11:02:36.362Z", "Updated": "2025-04-02T11:02:36.363Z", "Title": "Association ui", "Email": "testEmail1@gmail.com", "Department": 1, "Description": "another association", "Website": "https://google.com"}}, {"model": "association.association", "pk": 4, "fields": {"PublicId": "7d834605-9c93-413a-8f07-4fb3d0a15f22", "Created": "2025-04-02T12:30:23.661Z", "Updated": "2025-04-02T12:30:23.661Z", "Title": "association test", "Email": "aaaa@association.com", "Department": 16, "Description": "description", "Website": "https://google.com"}}, {"model": "association.association", "pk": 5, "fields": {"PublicId": "a6d8a9b8-01ca-4e96-bf08-04d2dd4c69a8", "Created": "2025-04-02T17:49:32.214Z", "Updated": "2025-04-02T17:49:32.215Z", "Title": "Passport Test", "Email": "passport@gov.ac.zw", "Department": 16, "Description": "an association", "Website": "https://google.com"}}, {"model": "association.association", "pk": 6, "fields": {"PublicId": "770b00b1-5481-44ed-b68c-48ab3bbc9d35", "Created": "2025-04-03T06:24:40.873Z", "Updated": "2025-04-03T06:24:40.873Z", "Title": "Uz test", "Email": "uz@their.email.com", "Department": 17, "Description": "uz stuff", "Website": "https://emhare.uz.ac.zw/Users/login"}}, {"model": "association.association", "pk": 7, "fields": {"PublicId": "e9e5a583-8bff-4056-93d5-d3a2d4425674", "Created": "2025-04-03T09:25:14.929Z", "Updated": "2025-04-03T09:25:14.929Z", "Title": "testAdminui", "Email": "admin.ui@gmail.com", "Department": 16, "Description": "test admin ui", "Website": "https://cpc.org.zw/index.php/about-us/"}}, {"model": "association.association", "pk": 8, "fields": {"PublicId": "1ad78378-7c6e-4c5d-a39d-ed2eecc52448", "Created": "2025-04-04T08:14:48.737Z", "Updated": "2025-04-04T08:14:48.737Z", "Title": "one mor etest", "Email": "onemore@more.com", "Department": 16, "Description": "one more", "Website": "https://bogus.com"}}, {"model": "publicService.publicservice", "pk": 4, "fields": {"PublicId": "59492fdc-173c-4232-b548-c782d0009b8c", "Created": "2025-02-27T08:22:31.224Z", "Updated": "2025-04-02T09:54:27.370Z", "Title": "testService", "MachineName": "testServiceop", "Description": "testService Description", "Email": "testService2025@gmail.com", "Association": 2, "Restricted": false, "URL": "http://127.0.0.1:8000/api/", "Visibility": true, "Grantee": [1], "Methods": []}}, {"model": "publicService.publicservice", "pk": 5, "fields": {"PublicId": "10cd455a-4517-4794-bb2b-0fe4edbbe88a", "Created": "2025-04-02T06:31:40.140Z", "Updated": "2025-04-02T06:31:40.173Z", "Title": "Google", "MachineName": "google", "Description": "Describe google", "Email": "testEmail1@gmail.com", "Association": 2, "Restricted": false, "URL": "https://www.google.com/", "Visibility": true, "Grantee": [1], "Methods": []}}, {"model": "publicService.publicservice", "pk": 6, "fields": {"PublicId": "98eaa468-19a5-4960-929a-e448cfc28783", "Created": "2025-04-03T06:59:36.131Z", "Updated": "2025-05-05T14:30:45.929Z", "Title": "UzService", "MachineName": "uz_service1", "Description": "uz stuff", "Email": "uz@their.email.com", "Association": 6, "Restricted": false, "URL": "https://www.zimra.co.zw/", "Visibility": true, "Grantee": [3], "Methods": []}}, {"model": "publicService.publicservice", "pk": 7, "fields": {"PublicId": "2fba4ea6-0622-46d5-8906-0967db4286e1", "Created": "2025-04-03T08:14:27.501Z", "Updated": "2025-04-03T08:14:27.526Z", "Title": "TestAdmin", "MachineName": "testAdmin", "Description": "test admin ui", "Email": "ui@gmail.com", "Association": 2, "Restricted": false, "URL": "https://www.poe.com/", "Visibility": true, "Grantee": [1], "Methods": []}}, {"model": "publicService.publicservice", "pk": 8, "fields": {"PublicId": "ab8e53b1-0e38-4afc-b4bf-5df3b99bd95f", "Created": "2025-04-03T09:40:46.782Z", "Updated": "2025-05-15T23:00:25.635Z", "Title": "testAdminUi", "MachineName": "testAdminUi", "Description": "https://cpc.org.zw/index.php/about-us/", "Email": "adminui@gmail.com", "Association": 7, "Restricted": false, "URL": "https://cpc.org.zw/index.php/", "Visibility": true, "Grantee": [5], "Methods": []}}, {"model": "request.request", "pk": 1, "fields": {"PublicId": "e2c9fc96-df45-4d7c-aa20-1d85f496b5f7", "Created": "2025-03-03T10:29:56.032Z", "Updated": "2025-03-03T10:29:56.032Z", "Subject": "Trial Test", "Citizen": 9, "PublicService": 4, "Message": "Trying out for the service"}}, {"model": "request.request", "pk": 2, "fields": {"PublicId": "409ffe69-0736-4903-b9f1-2d08d017acc3", "Created": "2025-04-02T10:42:32.985Z", "Updated": "2025-04-02T10:42:32.985Z", "Subject": "Request google", "Citizen": 9, "PublicService": 5, "Message": "heillo"}}, {"model": "request.request", "pk": 3, "fields": {"PublicId": "427a9c5d-08a3-40de-a00c-1d48ceeab943", "Created": "2025-04-02T12:54:54.883Z", "Updated": "2025-04-02T12:54:54.883Z", "Subject": "Google access", "Citizen": 1, "PublicService": 5, "Message": "i want do some research"}}, {"model": "request.request", "pk": 4, "fields": {"PublicId": "4a1e6579-b431-4f50-9bac-08215bdc5ed3", "Created": "2025-04-02T13:25:02.130Z", "Updated": "2025-04-02T13:25:02.130Z", "Subject": "Request service", "Citizen": 1, "PublicService": 4, "Message": "testing stuff"}}, {"model": "grant.grant", "pk": 1, "fields": {"PublicId": "c4917d9c-d594-45b9-9358-6e1aeed051ce", "Created": "2025-03-03T10:29:56.047Z", "Updated": "2025-04-03T11:33:59.455Z", "Message": "Youve been granted permission", "Request": 1, "Grantee": 1, "Decline": false, "StartDate": "2025-04-03T13:31:00Z", "EndDate": "2025-04-11T13:31:00Z"}}, {"model": "grant.grant", "pk": 2, "fields": {"PublicId": "3b281780-d025-4130-9040-7087308db318", "Created": "2025-04-02T10:42:33.004Z", "Updated": "2025-04-02T10:42:33.004Z", "Message": "N/A", "Request": 2, "Grantee": null, "Decline": false, "StartDate": null, "EndDate": null}}, {"model": "grant.grant", "pk": 3, "fields": {"PublicId": "2b589dbf-daf8-4002-bf99-bed3208dfd30", "Created": "2025-04-02T12:54:54.896Z", "Updated": "2025-04-02T12:54:54.896Z", "Message": "N/A", "Request": 3, "Grantee": null, "Decline": false, "StartDate": null, "EndDate": null}}, {"model": "grant.grant", "pk": 4, "fields": {"PublicId": "401443dc-a395-4a04-98f1-24e184113105", "Created": "2025-04-02T13:25:02.144Z", "Updated": "2025-04-02T13:25:02.144Z", "Message": "N/A", "Request": 4, "Grantee": null, "Decline": false, "StartDate": null, "EndDate": null}}, {"model": "servicePermissions.publicservicepermission", "pk": 3, "fields": {"PublicService": 6}}, {"model": "servicePermissions.publicservicepermission", "pk": 5, "fields": {"PublicService": 5}}, {"model": "servicePermissions.publicservicepermission", "pk": 7, "fields": {"PublicService": 8}}, {"model": "servicePermissions.associationpermission", "pk": 4, "fields": {"Association": 5}}, {"model": "servicePermissions.associationpermission", "pk": 6, "fields": {"Association": 1}}, {"model": "servicePermissions.associationpermission", "pk": 8, "fields": {"Association": 7}}, {"model": "servicePermissions.departmentpermission", "pk": 1, "fields": {"Department": 16}}, {"model": "servicePermissions.departmentpermission", "pk": 2, "fields": {"Department": 16}}, {"model": "servicePermissions.departmentpermission", "pk": 9, "fields": {"Department": 16}}, {"model": "servicePermissions.departmentpermission", "pk": 10, "fields": {"Department": 16}}, {"model": "servicePermissions.departmentpermission", "pk": 11, "fields": {"Department": 16}}, {"model": "servicePermissions.departmentpermission", "pk": 12, "fields": {"Department": 17}}, {"model": "systemLog.citizenlog", "pk": 4, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 5, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 6, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 7, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 8, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 9, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 10, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 11, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 12, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 13, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 14, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 15, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 16, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 17, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 18, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 19, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 20, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 21, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 22, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 23, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 24, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 25, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 26, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 27, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 28, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 29, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 30, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 31, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 32, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 33, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 34, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 35, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 36, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 37, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 38, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 39, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 40, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 41, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 42, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 43, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 44, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 45, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 46, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 47, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 48, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 49, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 50, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 51, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 52, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 53, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 54, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 55, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 56, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 57, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 58, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 59, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 60, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 61, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 62, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 63, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 64, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 65, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 66, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 67, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 68, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 69, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 70, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 71, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 72, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 73, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 74, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 75, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 76, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 77, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 78, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 79, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 80, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 81, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 82, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 83, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 84, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 85, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 86, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 87, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 88, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 89, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 90, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 91, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 92, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 93, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 94, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 95, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 96, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 97, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 98, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 99, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 100, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 101, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 102, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 103, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 104, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 105, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 106, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 107, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 108, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 109, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 110, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 111, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 112, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 113, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 114, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 115, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 116, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 117, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 118, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 119, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 120, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 121, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 122, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 123, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 124, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 125, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 126, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 127, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 128, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 129, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 130, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 131, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 132, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 133, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 134, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 135, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 136, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 137, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 138, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 139, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 140, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 141, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 143, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 145, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 147, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 148, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 149, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 150, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 151, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 152, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 153, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 154, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 155, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 156, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 157, "fields": {}}, {"model": "systemLog.citizenlog", "pk": 158, "fields": {}}, {"model": "systemLog.sitemanagerlog", "pk": 3, "fields": {"SiteManager": "8e2a331cd63c43fc98e0751e02cafa25"}}, {"model": "systemLog.sitemanagerlog", "pk": 142, "fields": {"SiteManager": "8e2a331cd63c43fc98e0751e02cafa25"}}, {"model": "systemLog.sitemanagerlog", "pk": 144, "fields": {"SiteManager": "8e2a331cd63c43fc98e0751e02cafa25"}}, {"model": "systemLog.sitemanagerlog", "pk": 146, "fields": {"SiteManager": "8e2a331cd63c43fc98e0751e02cafa25"}}, {"model": "serviceSession.servicesession", "pk": 1, "fields": {"PublicId": "49074ae2-1231-4252-996c-27db10af6b5c", "Created": "2025-05-12T14:50:50.456Z", "Updated": "2025-05-12T14:50:50.456Z", "Citizen": 10, "Service": 6, "IpAddress": "::1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 2, "fields": {"PublicId": "21c56c48-67fe-4905-9539-911fb0a6bfcf", "Created": "2025-05-12T14:51:49.054Z", "Updated": "2025-05-12T14:51:49.054Z", "Citizen": 10, "Service": 6, "IpAddress": "::1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 3, "fields": {"PublicId": "568eeb34-bf59-45ad-92af-199689c984e7", "Created": "2025-05-12T14:53:42.494Z", "Updated": "2025-05-12T14:53:42.494Z", "Citizen": 10, "Service": 6, "IpAddress": "::1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 4, "fields": {"PublicId": "1463cfb3-c1dc-4817-b0e9-beabdfc7a9e1", "Created": "2025-05-13T13:46:28.671Z", "Updated": "2025-05-13T13:46:28.671Z", "Citizen": 10, "Service": 6, "IpAddress": "::1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 5, "fields": {"PublicId": "d2803d7a-5a09-47e0-bf7b-97d374683dd1", "Created": "2025-05-13T15:46:48.490Z", "Updated": "2025-05-13T15:46:48.490Z", "Citizen": 10, "Service": 6, "IpAddress": "::1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 6, "fields": {"PublicId": "4774f0ce-9547-41b5-b3fd-2a342de3fddd", "Created": "2025-05-15T22:23:49.433Z", "Updated": "2025-05-15T22:23:49.433Z", "Citizen": 10, "Service": 6, "IpAddress": "::1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 7, "fields": {"PublicId": "97d16801-c12e-4ab6-a519-28de6f69674e", "Created": "2025-05-15T22:34:30.486Z", "Updated": "2025-05-15T22:34:30.486Z", "Citizen": 10, "Service": 6, "IpAddress": "127.0.0.1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 8, "fields": {"PublicId": "998b5db7-2e16-4228-baad-559cb2632f66", "Created": "2025-05-15T22:37:19.126Z", "Updated": "2025-05-15T22:37:19.126Z", "Citizen": 10, "Service": 8, "IpAddress": "127.0.0.1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 9, "fields": {"PublicId": "745a5b1c-afb3-4a25-a1a8-9b584bfdfcec", "Created": "2025-05-15T22:45:22.107Z", "Updated": "2025-05-15T22:45:22.107Z", "Citizen": 10, "Service": 8, "IpAddress": "127.0.0.1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 10, "fields": {"PublicId": "b37c5dbc-0937-4f91-a16d-c22e4081702c", "Created": "2025-05-15T22:45:41.587Z", "Updated": "2025-05-15T22:45:41.587Z", "Citizen": 10, "Service": 8, "IpAddress": "127.0.0.1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 11, "fields": {"PublicId": "2a97e5b6-9d04-4b8d-a5bf-6c7434aa5196", "Created": "2025-05-22T08:40:46.769Z", "Updated": "2025-05-22T08:40:46.769Z", "Citizen": 10, "Service": 6, "IpAddress": "::1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 12, "fields": {"PublicId": "c11b6835-c068-4906-ae98-ef06e990875f", "Created": "2025-05-22T09:14:07.305Z", "Updated": "2025-05-22T09:14:07.305Z", "Citizen": 10, "Service": 6, "IpAddress": "127.0.0.1", "LastSeen": null, "EnforceExpiry": false}}, {"model": "serviceSession.servicesession", "pk": 13, "fields": {"PublicId": "4789123d-1544-403e-ac3e-087236ee8dcd", "Created": "2025-05-22T09:55:30.194Z", "Updated": "2025-05-22T12:36:57.841Z", "Citizen": 10, "Service": 6, "IpAddress": "127.0.0.1", "LastSeen": "2025-05-22T12:36:57.834Z", "EnforceExpiry": false}}]